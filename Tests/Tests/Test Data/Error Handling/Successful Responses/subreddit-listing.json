{"kind": "Listing", "data": {"modhash": "myg3y5bhu2345e5b691a933ffa779d0bf16781a58ab16d75cf", "children": [{"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Dear Friends of functional Programming!&lt;/p&gt;\n\n&lt;p&gt;The next meeting of the Lambdaheads(&lt;a href=\"https://metalab.at/wiki/Lambdaheads\"&gt;https://metalab.at/wiki/Lambdaheads&lt;/a&gt;) will take place on Wed. July 9th 19:30 in the Metalab(&lt;a href=\"http://metalab.at\"&gt;http://metalab.at&lt;/a&gt;) library, everyone interested in programming languages especially functional ones is welcome to join.&lt;/p&gt;\n\n&lt;p&gt;Topic of the meeting will be &amp;quot;monads&amp;quot;, a topic most often misunderstood and declared too abstract for the common programmer. I will try to present on this topic in a comprehensible way and want to explain why any programming language profits in having monads, be it only to get rid of the nullpointer-problem.&lt;/p&gt;\n\n&lt;p&gt;Looking forward to meeting all of you\ncheers Martin &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Dear Friends of functional Programming!\n\nThe next meeting of the Lambdaheads(https://metalab.at/wiki/Lambdaheads) will take place on Wed. July 9th 19:30 in the Metalab(http://metalab.at) library, everyone interested in programming languages especially functional ones is welcome to join.\n\nTopic of the meeting will be \"monads\", a topic most often misunderstood and declared too abstract for the common programmer. I will try to present on this topic in a comprehensible way and want to explain why any programming language profits in having monads, be it only to get rid of the nullpointer-problem.\n\nLooking forward to meeting all of you\ncheers Martin ", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29wd3p", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "epsilonhalbe", "media": null, "score": 9, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29wd3p/lambdaheads_functional_programming_group_in_vienna/", "name": "t3_29wd3p", "created": 1404599032.0, "url": "http://www.reddit.com/r/haskell/comments/29wd3p/lambdaheads_functional_programming_group_in_vienna/", "author_flair_text": null, "title": "Lambdaheads: functional programming group in Vienna", "created_utc": 1404570232.0, "ups": 9, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;How do you keep your globally installed Haskell tools (e.g. pandoc, hlint, etc.) up to date?&lt;/p&gt;\n\n&lt;p&gt;The whole situation currently seems pretty messy to me.  With cabal sandboxes, the user package database seems really redundant to me.  All I still install to it are Haskell tools like pandoc, where I am not interested in the modules and packages, but only in the frontend programs, and I&amp;#39;d like to keep these up to date, like any other program I use.&lt;/p&gt;\n\n&lt;p&gt;Currently, I&amp;#39;m keeping a list of programs I use, and do &lt;code&gt;cabal install --upgrade-dependencies foo&lt;/code&gt; for each of them occasionally, which is pretty tedious, and occasionally fails due to version conflicts.&lt;/p&gt;\n\n&lt;p&gt;Ideally, I&amp;#39;d build each program in a separate sandbox, and only install the statically linked binaries and data files (as in &lt;code&gt;cabal copy&lt;/code&gt;).   Is there any tool for this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "How do you keep your globally installed Haskell tools (e.g. pandoc, hlint, etc.) up to date?\n\nThe whole situation currently seems pretty messy to me.  With cabal sandboxes, the user package database seems really redundant to me.  All I still install to it are Haskell tools like pandoc, where I am not interested in the modules and packages, but only in the frontend programs, and I'd like to keep these up to date, like any other program I use.\n\nCurrently, I'm keeping a list of programs I use, and do `cabal install --upgrade-dependencies foo` for each of them occasionally, which is pretty tedious, and occasionally fails due to version conflicts.\n\nIdeally, I'd build each program in a separate sandbox, and only install the statically linked binaries and data files (as in `cabal copy`).   Is there any tool for this?", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29vy9a", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "lunaryorn", "media": null, "score": 14, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29vy9a/how_do_you_work_around_the_lack_of_cabal_upgrade/", "name": "t3_29vy9a", "created": 1404578833.0, "url": "http://www.reddit.com/r/haskell/comments/29vy9a/how_do_you_work_around_the_lack_of_cabal_upgrade/", "author_flair_text": null, "title": "How do you work around the lack of \"cabal upgrade\"?", "created_utc": 1404550033.0, "ups": 14, "num_comments": 20, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "ghc.haskell.org", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29v4lj", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "AshleyYakeley", "media": null, "score": 58, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29v4lj/ghc_plans_for_7101/", "name": "t3_29v4lj", "created": 1404547053.0, "url": "https://ghc.haskell.org/trac/ghc/wiki/Status/GHC-7.10.1", "author_flair_text": null, "title": "GHC plans for 7.10.1", "created_utc": 1404518253.0, "ups": 58, "num_comments": 36, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "youtube.com", "banned_by": null, "media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=http%3A%2F%2Fwww.youtube.com%2Fembed%2FrtfbQJGQj0Q%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DrtfbQJGQj0Q&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FrtfbQJGQj0Q%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": {"oembed": {"provider_url": "http://www.youtube.com/", "description": "This is a recording of a talk given by Gershom Bazerman to Boston Haskell on Jun 18th, 2014.", "title": "Gershom Bazerman on Dynamic, Interactive Web Applications that Scale Forever and Upgrade Seamlessly", "url": "http://www.youtube.com/watch?v=rtfbQJGQj0Q", "type": "video", "author_name": "Edward Kmett", "height": 338, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FrtfbQJGQj0Q%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DrtfbQJGQj0Q&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FrtfbQJGQj0Q%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "version": "1.0", "provider_name": "YouTube", "thumbnail_url": "https://i.embed.ly/1/image?url=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FrtfbQJGQj0Q%2Fhqdefault.jpg&amp;key=b1e305db91cf4aa5a86b732cc9fffceb", "thumbnail_height": 360, "author_url": "http://www.youtube.com/user/edwardkmett"}, "type": "youtube.com"}, "link_flair_text": null, "id": "29vo6g", "gilded": 0, "secure_media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FrtfbQJGQj0Q%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DrtfbQJGQj0Q&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FrtfbQJGQj0Q%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "clicked": false, "stickied": false, "author": "edwardkmett", "media": {"oembed": {"provider_url": "http://www.youtube.com/", "description": "This is a recording of a talk given by Gershom Bazerman to Boston Haskell on Jun 18th, 2014.", "title": "Gershom Bazerman on Dynamic, Interactive Web Applications that Scale Forever and Upgrade Seamlessly", "url": "http://www.youtube.com/watch?v=rtfbQJGQj0Q", "type": "video", "author_name": "Edward Kmett", "height": 338, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=http%3A%2F%2Fwww.youtube.com%2Fembed%2FrtfbQJGQj0Q%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DrtfbQJGQj0Q&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FrtfbQJGQj0Q%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "version": "1.0", "provider_name": "YouTube", "thumbnail_url": "http://i1.ytimg.com/vi/rtfbQJGQj0Q/hqdefault.jpg", "thumbnail_height": 360, "author_url": "http://www.youtube.com/user/edwardkmett"}, "type": "youtube.com"}, "score": 19, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/MVA5APjQUa6xjmlZ.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29vo6g/gershom_bazerman_web_applications_that_scale/", "name": "t3_29vo6g", "created": 1404565949.0, "url": "https://www.youtube.com/watch?v=rtfbQJGQj0Q", "author_flair_text": null, "title": "Gershom Bazerman: Web Applications that Scale Forever and Upgrade Seamlessly", "created_utc": 1404537149.0, "ups": 19, "num_comments": 2, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;import Control.Monad\nmain = forM (map show [0..(2^64)]) putStrLn\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Why does this leak memory like a sieve? Why is [x..y] not the equivalent of python 3&amp;#39;s range function or more accurately, not the equivalent of a python generator?&lt;/p&gt;\n\n&lt;p&gt;Isn&amp;#39;t the point of lazy evaluation in haskell not allocating gobs of memory for things we don&amp;#39;t need until we need them and then throwing them away when they are no longer needed? I&amp;#39;ve only just started haskell and haven&amp;#39;t got into monads yet (I&amp;#39;ve got a rough idea of what they are about) but having such a simple program leak memory made me question my sanity.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "    import Control.Monad\n    main = forM (map show [0..(2^64)]) putStrLn\n\nWhy does this leak memory like a sieve? Why is [x..y] not the equivalent of python 3's range function or more accurately, not the equivalent of a python generator?\n\nIsn't the point of lazy evaluation in haskell not allocating gobs of memory for things we don't need until we need them and then throwing them away when they are no longer needed? I've only just started haskell and haven't got into monads yet (I've got a rough idea of what they are about) but having such a simple program leak memory made me question my sanity.", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29w0tx", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "dardyfella", "media": null, "score": 9, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29w0tx/why_does_this_leak_memory/", "name": "t3_29w0tx", "created": 1404582796.0, "url": "http://www.reddit.com/r/haskell/comments/29w0tx/why_does_this_leak_memory/", "author_flair_text": null, "title": "Why does this leak memory?", "created_utc": 1404553996.0, "ups": 9, "num_comments": 8, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Some time ago I learned about the operational semantics for monads in a &lt;a href=\"http://apfelmus.nfshost.com/articles/operational-monad.html\"&gt;blog post&lt;/a&gt; by &lt;a href=\"/u/apfelmus\"&gt;/u/apfelmus&lt;/a&gt;. It seemed like a nice way to build a monadic DSL. &lt;/p&gt;\n\n&lt;p&gt;More recently I saw lots of internet discussion about the Free Monad, which is also a pattern that can be used to create monadic DSLs. &lt;/p&gt;\n\n&lt;p&gt;Is there a deeper algebraic relationship between those two patterns?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Some time ago I learned about the operational semantics for monads in a [blog post](http://apfelmus.nfshost.com/articles/operational-monad.html) by /u/apfelmus. It seemed like a nice way to build a monadic DSL. \n\nMore recently I saw lots of internet discussion about the Free Monad, which is also a pattern that can be used to create monadic DSLs. \n\nIs there a deeper algebraic relationship between those two patterns?", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29wyr8", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "calsaverini", "media": null, "score": 1, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29wyr8/is_there_a_relation_between_the_operational_monad/", "name": "t3_29wyr8", "created": 1404616251.0, "url": "http://www.reddit.com/r/haskell/comments/29wyr8/is_there_a_relation_between_the_operational_monad/", "author_flair_text": null, "title": "Is there a relation between the operational monad and the free monad?", "created_utc": 1404587451.0, "ups": 1, "num_comments": 1, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "devskypers.blogspot.fr", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29vat3", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "_skp", "media": null, "score": 17, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/QEWJKYvcouHFYdme.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29vat3/representing_a_3d_scene/", "name": "t3_29vat3", "created": 1404552530.0, "url": "http://devskypers.blogspot.fr/2014/07/lost-in-space.html", "author_flair_text": null, "title": "Representing a 3D scene", "created_utc": 1404523730.0, "ups": 17, "num_comments": 10, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;In many emacs language modes, there are commands for\ninteracting with a repl/interpreter for that language.&lt;/p&gt;\n\n&lt;p&gt;Often there are commands for sending just specific parts of\nthe file (like single expressions or subexpressions or\nregoins) to the repl.&lt;/p&gt;\n\n&lt;p&gt;For example (among, no doubt, numerous others)&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;In ocaml, with tuareg \nC-c C-e (tuareg-eval-phrase)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In clojure, with &lt;a href=\"https://github.com/clojure-emacs/cider/blob/master/cider-mode.el\"&gt;cider&lt;/a&gt; (M-x cider-jack-in)\nC-c C-e (cider-eval-last-sexp)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;In ruby, with ruby-mode\nC-x C-e (ruby-send-last-sexp)&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I&amp;#39;m trying to do this in haskell-mode.  I can type stuff in\nthe repl within emacs and it seems to work.  And while\nediting a buffer containing a .hs file, I can load the WHOLE\nfile into the repl with:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.haskell.org/haskellwiki/Emacs/Keybindings_and_simple_usage\"&gt;C-c C-l (haskell-process-load-file)&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;BUT&lt;/em&gt; I&amp;#39;m not sure how to send to the repl:&lt;/p&gt;\n\n&lt;p&gt;1) only a portion of the file&lt;/p&gt;\n\n&lt;p&gt;2) &amp;quot;naked expressions&amp;quot; \n     I tried a file with just a single expression and it\n     gave an error.  This is no big deal if you have to\n     evaluate the whole file anyway.  But if a &amp;quot;portion&amp;quot;\n     were possible (point 1) then being able to send an\n     expression or subexpression to the repl is sometimes\n     useful.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m just having a little look at haskell, and am just trying\nto get a nice interactive setup.&lt;/p&gt;\n\n&lt;p&gt;Any suggestions on how to send portions of a haskell file to\nthe repl would be much appreciated.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m hoping there&amp;#39;s just some configuration technique that\nI&amp;#39;m not aware of.  &lt;/p&gt;\n\n&lt;p&gt;I guess it might be possible to write an emacs mode or\nmodify haskell-mode to do this.  But as just a basic emacs\nuser, that&amp;#39;s probably not a good option.  And also, if it is\nnot possible in the existing haskell-mode (written by\nsomeone who knows a lot more haskell and emacs than I do)\nthen maybe there&amp;#39;s some technical difficulty with doing it.\n(Considering it&amp;#39;s a fairly obvious thing to do and is done\nfor many other languages)&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Note: \n&lt;a href=\"http://www.reddit.com/r/haskellquestions/comments/29tajp/emacs_haskellmode_how_to_send_part_file_to_repl/\"&gt;Previously asked&lt;/a&gt;\non r/haskellquestions.&lt;br/&gt;\nBut no response.\nSo asking again here where the traffic is greater by an order\nof magnitude or two.&lt;br/&gt;\n(And people seem to be asking quite a few questions anyway.)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "In many emacs language modes, there are commands for\ninteracting with a repl/interpreter for that language.\n\nOften there are commands for sending just specific parts of\nthe file (like single expressions or subexpressions or\nregoins) to the repl.\n\nFor example (among, no doubt, numerous others)\n\n- In ocaml, with tuareg \n    C-c C-e (tuareg-eval-phrase)\n  \n- In clojure, with [cider](https://github.com/clojure-emacs/cider/blob/master/cider-mode.el) (M-x cider-jack-in)\n    C-c C-e (cider-eval-last-sexp)\n  \n- In ruby, with ruby-mode\n    C-x C-e (ruby-send-last-sexp)\n  \nI'm trying to do this in haskell-mode.  I can type stuff in\nthe repl within emacs and it seems to work.  And while\nediting a buffer containing a .hs file, I can load the WHOLE\nfile into the repl with:\n\n  [C-c C-l (haskell-process-load-file)](http://www.haskell.org/haskellwiki/Emacs/Keybindings_and_simple_usage)\n\n*BUT* I'm not sure how to send to the repl:\n\n  1) only a portion of the file\n\n  2) \"naked expressions\" \n     I tried a file with just a single expression and it\n     gave an error.  This is no big deal if you have to\n     evaluate the whole file anyway.  But if a \"portion\"\n     were possible (point 1) then being able to send an\n     expression or subexpression to the repl is sometimes\n     useful.\n\nI'm just having a little look at haskell, and am just trying\nto get a nice interactive setup.\n\nAny suggestions on how to send portions of a haskell file to\nthe repl would be much appreciated.\n\nI'm hoping there's just some configuration technique that\nI'm not aware of.  \n\nI guess it might be possible to write an emacs mode or\nmodify haskell-mode to do this.  But as just a basic emacs\nuser, that's probably not a good option.  And also, if it is\nnot possible in the existing haskell-mode (written by\nsomeone who knows a lot more haskell and emacs than I do)\nthen maybe there's some technical difficulty with doing it.\n(Considering it's a fairly obvious thing to do and is done\nfor many other languages)\n\n----\n\nNote: \n[Previously asked](http://www.reddit.com/r/haskellquestions/comments/29tajp/emacs_haskellmode_how_to_send_part_file_to_repl/)\non r/haskellquestions.  \nBut no response.\nSo asking again here where the traffic is greater by an order\nof magnitude or two.  \n(And people seem to be asking quite a few questions anyway.)\n\n", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29vzl9", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "tersoffe", "media": null, "score": 4, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1404552976.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29vzl9/emacs_haskellmode_how_to_send_part_of_file_to_repl/", "name": "t3_29vzl9", "created": 1404580753.0, "url": "http://www.reddit.com/r/haskell/comments/29vzl9/emacs_haskellmode_how_to_send_part_of_file_to_repl/", "author_flair_text": null, "title": "Emacs haskell-mode : how to send PART of file to repl ?", "created_utc": 1404551953.0, "ups": 4, "num_comments": 1, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "blog.patch-tag.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29umgs", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "tphyahoo", "media": null, "score": 23, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/gUvv-eb-E87Zz3xb.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29umgs/patchtag_is_shutting_down_on_august_4_2014_please/", "name": "t3_29umgs", "created": 1404532797.0, "url": "http://blog.patch-tag.com/2014/07/04/patch-tag-is-shutting-down-on-august-4-2014-please-migrate-repos-to-hub-darcs-net/", "author_flair_text": null, "title": "Patch-tag is shutting down on August 4 2014. Please migrate repos to hub.darcs.net.", "created_utc": 1404503997.0, "ups": 23, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve implemented a heterogeneous set, and it seems to be working (tested on one example :P), but I&amp;#39;m not sure if I&amp;#39;m doing everything right.&lt;/p&gt;\n\n&lt;p&gt;First of all, to allow for comparison between two different types, I&amp;#39;ve written class &lt;code&gt;Ord1&amp;#39;&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;infixr 4 ==%, /=%, &amp;lt;%, &amp;gt;%, &amp;lt;=%, &amp;gt;=%\nclass Eq1&amp;#39; t where\n    (==%) :: t a -&amp;gt; t b -&amp;gt; Bool\nclass Eq1&amp;#39; t =&amp;gt; Ord1&amp;#39; t where\n    compare1&amp;#39; :: t a -&amp;gt; t b -&amp;gt; Ordering\n-- (/=%), (&amp;lt;%), (&amp;gt;%), (&amp;lt;=%) and (&amp;gt;=%)\n-- are implemented in the obvious way\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;Ord1&amp;#39;&lt;/code&gt; is a higher-kinded &lt;code&gt;Ord&lt;/code&gt;, which (unlike &lt;code&gt;Ord1&lt;/code&gt; from &lt;code&gt;prelude-extras&lt;/code&gt;) allows for comparison between &lt;code&gt;t a&lt;/code&gt; and &lt;code&gt;t b&lt;/code&gt;, where &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; don&amp;#39;t need to be equal.\nSo, &lt;code&gt;t&lt;/code&gt; is a container which implements comparison without looking inside of &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The heterogeneous set&amp;#39;s type is implemented as an unbalanced binary tree as follows:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data HSet v\n    -- leaf node\n    = HSetEmpty\n    -- internal node, storing a value of type &amp;#39;v a&amp;#39;\n    -- (uses ExistentialQuantification)\n    | forall a. HSetNode (v a) (HSet v) (HSet v)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Functions operating on &lt;code&gt;HSet&lt;/code&gt; require &lt;code&gt;v&lt;/code&gt; to be an instance of &lt;code&gt;Ord1&amp;#39;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Insertion is straightforward:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;insert :: Ord1&amp;#39; v =&amp;gt; HSet v -&amp;gt; v a -&amp;gt; HSet v\ninsert HSetEmpty e = HSetNode e HSetEmpty HSetEmpty\ninsert (HSetNode se l r) e\n    | e &amp;lt;% se = HSetNode se (insert l e) r\n    | otherwise = HSetNode se l (insert r e)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So is (in-order) traversal (Rank2Types in action):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;hmap :: Ord1&amp;#39; v =&amp;gt; HSet v -&amp;gt; (forall a. v a -&amp;gt; b) -&amp;gt; [b]\nhmap HSetEmpty _ = []\n-- inefficient, but that&amp;#39;s fine\nhmap (HSetNode se l r) f = hmap l f ++ f se : hmap r f\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Deletion, however, is more tricky:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-- deletes one instance, if at least one is present\ndelete :: Ord1&amp;#39; v =&amp;gt; HSet v -&amp;gt; v a -&amp;gt; HSet v\ndelete HSetEmpty _ = HSetEmpty\ndelete (HSetNode se l r) e\n    | e &amp;lt;% se = HSetNode se (delete l e) r\n    | e &amp;gt;% se = HSetNode se l (delete r e)\n    | otherwise = case l of\n        HSetEmpty -&amp;gt; r\n        _ -&amp;gt; HSetNode popped remains r\n    where\n    (popped, remains) = popMax l se\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We do the standard procedure: when we find a matching element, we have to remove it, but its subtrees &lt;code&gt;l&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt; have to be preserved. If &lt;code&gt;l&lt;/code&gt; subtree is empty, we can just plug the right subtree here, and end the procedure.&lt;/p&gt;\n\n&lt;p&gt;However, if the subtrees are not empty, they need to be merged. The easiest way to do this is to remove the rightmost element from &lt;code&gt;l&lt;/code&gt; (this is done by the function &lt;code&gt;popMax&lt;/code&gt;, removed element is called &lt;code&gt;popped&lt;/code&gt; here), and use it as the top element, with remains of &lt;code&gt;l&lt;/code&gt; (&lt;code&gt;remains&lt;/code&gt;) as its left subtree, and &lt;code&gt;r&lt;/code&gt; as the right subtree.&lt;/p&gt;\n\n&lt;p&gt;The problem is that we don&amp;#39;t know the type of &lt;code&gt;popped&lt;/code&gt;. This is where &lt;code&gt;unsafeCoerce&lt;/code&gt; comes into play. &lt;code&gt;popMax&lt;/code&gt; removes the rightmost element of &lt;code&gt;l&lt;/code&gt;, and returns it coerced to &lt;code&gt;v a&lt;/code&gt; (the type of &lt;code&gt;e&lt;/code&gt;):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;popMax :: HSet v -&amp;gt; v a -&amp;gt; (v a, HSet v)\npopMax HSetEmpty _ = undefined\npopMax (HSetNode se l HSetEmpty) _\n    = (unsafeCoerce se :: v a, l)\npopMax (HSetNode se l r) e\n    = let (popped, remains) = popMax r e \n    in (popped, HSetNode se l remains)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&amp;#39;s it.&lt;/p&gt;\n\n&lt;p&gt;Example usage:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data Cmp a = Cmp Int a (a -&amp;gt; Double)\ninstance Eq1&amp;#39; Cmp where\n    Cmp key1 _ _ ==% Cmp key2 _ _ = key1 == key2\ninstance Ord1&amp;#39; Cmp where\n    compare1&amp;#39; (Cmp key1 _ _) (Cmp key2 _ _) = compare key1 key2\n\ns0 = HSetEmpty\ns1 = insert s0 (Cmp 7 6.0 (+1.0))\ns2 = insert s1 (Cmp 3 3 fromIntegral)\ns3 = insert s2 (Cmp 1 &amp;quot;1&amp;quot; read)\ns4 = insert s3 (Cmp 5 () (const 5.0))\ns5 = delete s4 (Cmp 3 undefined undefined)\n\n-- prints &amp;quot;[1.0,5.0,7.0]&amp;quot;\nmain = print $ hmap s5 $ \\(Cmp _ v f) -&amp;gt; f v\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"http://lpaste.net/106948\"&gt;All code in one piece&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve read about &lt;a href=\"https://hackage.haskell.org/package/ghc-prim-0.3.1.0/docs/GHC-Prim.html#v:unsafeCoerce-35-\"&gt;unsafeCoerce&lt;/a&gt; and &lt;a href=\"https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/TypeType#Classifyingtypes\"&gt;lifted types&lt;/a&gt;, but I&amp;#39;m still not sure:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Is this use of &lt;code&gt;unsafeCoerce&lt;/code&gt; safe for all possible values of &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;?&lt;/li&gt;\n&lt;li&gt;Can I (should I?) coerce to &lt;code&gt;GHC.Exts.Any&lt;/code&gt; instead of &lt;code&gt;v a&lt;/code&gt;?&lt;/li&gt;\n&lt;li&gt;Does ExistentialQualification introduce a hidden &amp;quot;vtable&amp;quot; here? Would GADTs have?&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Bonus questions:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;If I change the first &lt;code&gt;$&lt;/code&gt; to a &lt;code&gt;.&lt;/code&gt; in &lt;code&gt;main&lt;/code&gt;, it doesn&amp;#39;t compile (both with Rank2Types and RankNTypes). Why?&lt;/li&gt;\n&lt;li&gt;Is there a better way to implement a heterogeneous set?&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I&amp;#39;ve finally made a reddit account after years of lurking, so I&amp;#39;m sorry for posting such a wall of text without any previous contributions.\nThanks for reading.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I've implemented a heterogeneous set, and it seems to be working (tested on one example :P), but I'm not sure if I'm doing everything right.\n\nFirst of all, to allow for comparison between two different types, I've written class `Ord1'`:\n\n\tinfixr 4 ==%, /=%, &lt;%, &gt;%, &lt;=%, &gt;=%\n\tclass Eq1' t where\n\t\t(==%) :: t a -&gt; t b -&gt; Bool\n\tclass Eq1' t =&gt; Ord1' t where\n\t\tcompare1' :: t a -&gt; t b -&gt; Ordering\n\t-- (/=%), (&lt;%), (&gt;%), (&lt;=%) and (&gt;=%)\n\t-- are implemented in the obvious way\n`Ord1'` is a higher-kinded `Ord`, which (unlike `Ord1` from `prelude-extras`) allows for comparison between `t a` and `t b`, where `a` and `b` don't need to be equal.\nSo, `t` is a container which implements comparison without looking inside of `a` or `b`.\n\nThe heterogeneous set's type is implemented as an unbalanced binary tree as follows:\n\n\tdata HSet v\n\t\t-- leaf node\n\t\t= HSetEmpty\n\t\t-- internal node, storing a value of type 'v a'\n\t\t-- (uses ExistentialQuantification)\n\t\t| forall a. HSetNode (v a) (HSet v) (HSet v)\nFunctions operating on `HSet` require `v` to be an instance of `Ord1'`.\n\nInsertion is straightforward:\n\n\tinsert :: Ord1' v =&gt; HSet v -&gt; v a -&gt; HSet v\n\tinsert HSetEmpty e = HSetNode e HSetEmpty HSetEmpty\n\tinsert (HSetNode se l r) e\n\t\t| e &lt;% se = HSetNode se (insert l e) r\n\t\t| otherwise = HSetNode se l (insert r e)\n\nSo is (in-order) traversal (Rank2Types in action):\n\n\thmap :: Ord1' v =&gt; HSet v -&gt; (forall a. v a -&gt; b) -&gt; [b]\n\thmap HSetEmpty _ = []\n\t-- inefficient, but that's fine\n\thmap (HSetNode se l r) f = hmap l f ++ f se : hmap r f\n\nDeletion, however, is more tricky:\n\n\t-- deletes one instance, if at least one is present\n\tdelete :: Ord1' v =&gt; HSet v -&gt; v a -&gt; HSet v\n\tdelete HSetEmpty _ = HSetEmpty\n\tdelete (HSetNode se l r) e\n\t\t| e &lt;% se = HSetNode se (delete l e) r\n\t\t| e &gt;% se = HSetNode se l (delete r e)\n\t\t| otherwise = case l of\n\t\t\tHSetEmpty -&gt; r\n\t\t\t_ -&gt; HSetNode popped remains r\n\t\twhere\n\t\t(popped, remains) = popMax l se\nWe do the standard procedure: when we find a matching element, we have to remove it, but its subtrees `l` and `r` have to be preserved. If `l` subtree is empty, we can just plug the right subtree here, and end the procedure.\n\nHowever, if the subtrees are not empty, they need to be merged. The easiest way to do this is to remove the rightmost element from `l` (this is done by the function `popMax`, removed element is called `popped` here), and use it as the top element, with remains of `l` (`remains`) as its left subtree, and `r` as the right subtree.\n\nThe problem is that we don't know the type of `popped`. This is where `unsafeCoerce` comes into play. `popMax` removes the rightmost element of `l`, and returns it coerced to `v a` (the type of `e`):\n\n\tpopMax :: HSet v -&gt; v a -&gt; (v a, HSet v)\n\tpopMax HSetEmpty _ = undefined\n\tpopMax (HSetNode se l HSetEmpty) _\n\t\t= (unsafeCoerce se :: v a, l)\n\tpopMax (HSetNode se l r) e\n\t\t= let (popped, remains) = popMax r e \n\t\tin (popped, HSetNode se l remains)\n\nThat's it.\n\nExample usage:\n\n\tdata Cmp a = Cmp Int a (a -&gt; Double)\n\tinstance Eq1' Cmp where\n\t\tCmp key1 _ _ ==% Cmp key2 _ _ = key1 == key2\n\tinstance Ord1' Cmp where\n\t\tcompare1' (Cmp key1 _ _) (Cmp key2 _ _) = compare key1 key2\n\t\n\ts0 = HSetEmpty\n\ts1 = insert s0 (Cmp 7 6.0 (+1.0))\n\ts2 = insert s1 (Cmp 3 3 fromIntegral)\n\ts3 = insert s2 (Cmp 1 \"1\" read)\n\ts4 = insert s3 (Cmp 5 () (const 5.0))\n\ts5 = delete s4 (Cmp 3 undefined undefined)\n\t\n\t-- prints \"[1.0,5.0,7.0]\"\n\tmain = print $ hmap s5 $ \\(Cmp _ v f) -&gt; f v\n\n[All code in one piece](http://lpaste.net/106948).\n\nI've read about [unsafeCoerce](https://hackage.haskell.org/package/ghc-prim-0.3.1.0/docs/GHC-Prim.html#v:unsafeCoerce-35-) and [lifted types](https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/TypeType#Classifyingtypes), but I'm still not sure:\n\n1. Is this use of `unsafeCoerce` safe for all possible values of `v` and `a`?\n2. Can I (should I?) coerce to `GHC.Exts.Any` instead of `v a`?\n3. Does ExistentialQualification introduce a hidden \"vtable\" here? Would GADTs have?\n\nBonus questions:\n\n1. If I change the first `$` to a `.` in `main`, it doesn't compile (both with Rank2Types and RankNTypes). Why?\n2. Is there a better way to implement a heterogeneous set?\n\nI've finally made a reddit account after years of lurking, so I'm sorry for posting such a wall of text without any previous contributions.\nThanks for reading.", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29v6cm", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "willIEverGraduate", "media": null, "score": 8, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29v6cm/heterogeneous_set_is_unsafecoerce_safe_here/", "name": "t3_29v6cm", "created": 1404548558.0, "url": "http://www.reddit.com/r/haskell/comments/29v6cm/heterogeneous_set_is_unsafecoerce_safe_here/", "author_flair_text": null, "title": "Heterogeneous Set: is unsafeCoerce safe here?", "created_utc": 1404519758.0, "ups": 8, "num_comments": 4, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello!&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m interested in learning a functional programming language, and I&amp;#39;m also interested in making music using code (i.e. &amp;#39;live coding&amp;#39;).&lt;/p&gt;\n\n&lt;p&gt;Haskell is the functional language I really want to learn, but it doesn&amp;#39;t seem to have a lively and active music making community, unlike Clojure with Overtone + Supercollider. So far I&amp;#39;ve stumbled across Tidal, which while incredibly cool, isn&amp;#39;t designed to fulfil all your music making needs, unlike Overtone.&lt;/p&gt;\n\n&lt;p&gt;So, what are you thoughts? Should I try and get over the abundance of brackets + the JVM, and go with Clojure?&lt;/p&gt;\n\n&lt;p&gt;Thanks,&lt;br/&gt;\nLouis&lt;/p&gt;\n\n&lt;p&gt;edit: I found this, it looks cool. &lt;a href=\"https://github.com/anton-k/csound-expression\"&gt;https://github.com/anton-k/csound-expression&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hello!\n\nI'm interested in learning a functional programming language, and I'm also interested in making music using code (i.e. 'live coding').\n\nHaskell is the functional language I really want to learn, but it doesn't seem to have a lively and active music making community, unlike Clojure with Overtone + Supercollider. So far I've stumbled across Tidal, which while incredibly cool, isn't designed to fulfil all your music making needs, unlike Overtone.\n\nSo, what are you thoughts? Should I try and get over the abundance of brackets + the JVM, and go with Clojure?\n\nThanks,  \nLouis\n\nedit: I found this, it looks cool. https://github.com/anton-k/csound-expression", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29urrn", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "MrPopinjay", "media": null, "score": 8, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1404512572.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29urrn/how_viable_is_using_haskell_to_make_music_should/", "name": "t3_29urrn", "created": 1404536771.0, "url": "http://www.reddit.com/r/haskell/comments/29urrn/how_viable_is_using_haskell_to_make_music_should/", "author_flair_text": null, "title": "How viable is using Haskell to make music? Should I be using Clojure + Overtone instead?", "created_utc": 1404507971.0, "ups": 8, "num_comments": 21, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I know this is a Haskell forum, but Haskell community tends to be polyglot and fairly open-minded about right tool for right job.  I&amp;#39;ve been thinking about fact that there are only two main OS architectures in personal computing:  DOS/Windows line vs Unix line (MacOS/iOS, Linux, Android).  What if someone (finally) decided to build a completely new OS from scratch without re-hashing Unix yet again and designing it to meet the needs of modern devices, networks, services, etc.  What would be the programming language of choice for a low level &amp;#39;modern&amp;#39; operating system if restricted to known languages (old or recent) as opposed to also inventing another hypothetical &amp;#39;ideal&amp;#39; language?&lt;/p&gt;\n\n&lt;p&gt;Here are the choices:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt; Assembly language&lt;/li&gt;\n&lt;li&gt; C&lt;/li&gt;\n&lt;li&gt; Lisp variant&lt;/li&gt;\n&lt;li&gt; Java&lt;/li&gt;\n&lt;li&gt; Erlang&lt;/li&gt;\n&lt;li&gt; Golang&lt;/li&gt;\n&lt;li&gt; Haskell&lt;/li&gt;\n&lt;li&gt; Javascript (gasp!)&lt;/li&gt;\n&lt;li&gt; ML variant&lt;/li&gt;\n&lt;li&gt;Scala&lt;/li&gt;\n&lt;li&gt;Rust&lt;/li&gt;\n&lt;li&gt;Logic programming (Prolog, Mercury)&lt;/li&gt;\n&lt;li&gt;Other (specify)&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I know this is a Haskell forum, but Haskell community tends to be polyglot and fairly open-minded about right tool for right job.  I've been thinking about fact that there are only two main OS architectures in personal computing:  DOS/Windows line vs Unix line (MacOS/iOS, Linux, Android).  What if someone (finally) decided to build a completely new OS from scratch without re-hashing Unix yet again and designing it to meet the needs of modern devices, networks, services, etc.  What would be the programming language of choice for a low level 'modern' operating system if restricted to known languages (old or recent) as opposed to also inventing another hypothetical 'ideal' language?\n\nHere are the choices:\n\n1.  Assembly language\n2.  C\n3.  Lisp variant\n4.  Java\n5.  Erlang\n6.  Golang\n7.  Haskell\n8.  Javascript (gasp!)\n9.  ML variant\n10. Scala\n11. Rust\n12. Logic programming (Prolog, Mercury)\n13. Other (specify)", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29tgjd", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "RaymondWies", "media": null, "score": 33, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29tgjd/ideal_programming_language_for_a_new_modern_os/", "name": "t3_29tgjd", "created": 1404498946.0, "url": "http://www.reddit.com/r/haskell/comments/29tgjd/ideal_programming_language_for_a_new_modern_os/", "author_flair_text": null, "title": "Ideal programming language for a new modern OS built from scratch?", "created_utc": 1404470146.0, "ups": 33, "num_comments": 54, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;A recent working-paper &lt;a href=\"http://economics.sas.upenn.edu/%7Ejesusfv/comparison_languages.pdf\"&gt;A Comparison of Programming Languages in Economics&lt;/a&gt; compares the performance of different languages for a dynamic optimization problem arising in economics. The &lt;a href=\"https://github.com/jesusfv/Comparison-Programming-Languages-Economics\"&gt;original code&lt;/a&gt; is on GitHub.&lt;/p&gt;\n\n&lt;p&gt;The authors have not considered any functional programming languages, though they promise to do so in a later paper. I have independently reimplemented their program in Haskell&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/jmoy/avb-econ-hs\"&gt;https://github.com/jmoy/avb-econ-hs&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;My program, which uses REPA runs about 3 times slower than the authors&amp;#39; C++ program. I would greatly appreciate comments on my code, particularly about ways it can be made faster without sacrificing the quality of expression too much. I do not want to end up writing C++ in Haskell.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "A recent working-paper [A Comparison of Programming Languages in Economics](http://economics.sas.upenn.edu/~jesusfv/comparison_languages.pdf) compares the performance of different languages for a dynamic optimization problem arising in economics. The [original code](https://github.com/jesusfv/Comparison-Programming-Languages-Economics) is on GitHub.\n\nThe authors have not considered any functional programming languages, though they promise to do so in a later paper. I have independently reimplemented their program in Haskell\n\nhttps://github.com/jmoy/avb-econ-hs\n\nMy program, which uses REPA runs about 3 times slower than the authors' C++ program. I would greatly appreciate comments on my code, particularly about ways it can be made faster without sacrificing the quality of expression too much. I do not want to end up writing C++ in Haskell.\n", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29uq68", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "yomritoyj", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29uq68/request_for_code_review_dynamic_programming/", "name": "t3_29uq68", "created": 1404535575.0, "url": "http://www.reddit.com/r/haskell/comments/29uq68/request_for_code_review_dynamic_programming/", "author_flair_text": null, "title": "Request for code review: Dynamic programming", "created_utc": 1404506775.0, "ups": 5, "num_comments": 3, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "stackoverflow.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29reb7", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "sibip", "media": null, "score": 14, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/80tnunXhQJXBAP3L.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29reb7/first_or_second_edition_of_introduction_to/", "name": "t3_29reb7", "created": 1404440825.0, "url": "http://stackoverflow.com/q/3993730/1651941", "author_flair_text": null, "title": "First or second edition of \u201cIntroduction to Functional Programming\u201d by Bird &amp; Wadler?", "created_utc": 1404412025.0, "ups": 14, "num_comments": 10, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been using the xmonad tiling window manager for a while now, and picked up a bit of Haskell along the way so I could make sense of configuring it. I&amp;#39;m mainly a Python guy, and I enjoyed doing a bit of Clojure not too long ago - I really liked it, but pure functional languages like Haskell are new to me.&lt;/p&gt;\n\n&lt;p&gt;I soon came to need one feature that xmonad lacks - namely, being able to save the current state of a workspace, complete with any modifications to the layout state such as resizing and reordering windows. &lt;a href=\"http://stackoverflow.com/a/8681703/425219\"&gt;This StackOverflow answer&lt;/a&gt; comes pretty close: xmonad already stores and then reloads all of its state when you restart it. I would like to implement this in order to learn some actual Haskell; however, I&amp;#39;m a complete newb at Haskell and I find myself at a complete loss.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m thinking of starting out by writing something like a LayoutModifier which responds to a message and writes the underlying layout&amp;#39;s state to a file... only I don&amp;#39;t understand file IO in Haskell and can&amp;#39;t figure out whether the layout state would be in the available scope. Actually, can a LayoutModifier even take a Choice of layouts (which the ||| layout combinator seems to be returning)? Do you nice folks happen to have any pointers?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I've been using the xmonad tiling window manager for a while now, and picked up a bit of Haskell along the way so I could make sense of configuring it. I'm mainly a Python guy, and I enjoyed doing a bit of Clojure not too long ago - I really liked it, but pure functional languages like Haskell are new to me.\n\nI soon came to need one feature that xmonad lacks - namely, being able to save the current state of a workspace, complete with any modifications to the layout state such as resizing and reordering windows. [This StackOverflow answer](http://stackoverflow.com/a/8681703/425219) comes pretty close: xmonad already stores and then reloads all of its state when you restart it. I would like to implement this in order to learn some actual Haskell; however, I'm a complete newb at Haskell and I find myself at a complete loss.\n\nI'm thinking of starting out by writing something like a LayoutModifier which responds to a message and writes the underlying layout's state to a file... only I don't understand file IO in Haskell and can't figure out whether the layout state would be in the available scope. Actually, can a LayoutModifier even take a Choice of layouts (which the ||| layout combinator seems to be returning)? Do you nice folks happen to have any pointers?", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29rr78", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "egasimus", "media": null, "score": 8, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29rr78/writing_a_plugin_to_save_xmonad_state/", "name": "t3_29rr78", "created": 1404448424.0, "url": "http://www.reddit.com/r/haskell/comments/29rr78/writing_a_plugin_to_save_xmonad_state/", "author_flair_text": null, "title": "Writing a plugin to save xmonad state?", "created_utc": 1404419624.0, "ups": 8, "num_comments": 3, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "haskell-web.blogspot.com.es", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29qpmu", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "juhp", "media": null, "score": 12, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/P_rZacSnIVwysT7D.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29qpmu/hasteperch_for_dynamic_html/", "name": "t3_29qpmu", "created": 1404425731.0, "url": "http://haskell-web.blogspot.com.es/2014/06/taming-html-dom-with-monads-and-monoids.html", "author_flair_text": null, "title": "Haste-perch: for dynamic html", "created_utc": 1404396931.0, "ups": 12, "num_comments": 11, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello /haskell/, I was reading &lt;a href=\"https://github.com/tibbe/talks/blob/master/bahug-2012/slides.md\"&gt;Johan Tibbe&amp;#39;s talk on GHC performance&lt;/a&gt; and one thing baffled me, and I quote:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Polymorphic fields are always stored as pointer-to-thing, which increases memory usage and decreases cache locality. Compare:&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre&gt;&lt;code&gt;data Tree a = Leaf | Bin a !(Tree a) !(Tree a)\ndata IntTree = IntLeaf | IntBin {-# UNPACK #-} !Int !IntTree !IntTree\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Specialized data types can be faster, but at the cost of code duplication. Benchmark your code and only use them if really needed.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It turns out that Haskell&amp;#39;s polymorphic types are not a zero-cost abstraction, and it would be perfectly normal in a unityped language where generics can only be implemented through runtime checks, but can&amp;#39;t Haskell do better than that? After all, GHC has type inference, it knows the types of everything at compile time, it can infer typeclass instances at compile time, making typeclass methods zero-overhead, etc. So seeing that a &lt;code&gt;Tree Int&lt;/code&gt; for some reason cannot be represented the same as an &lt;code&gt;IntTree&lt;/code&gt; is... baffling. Is there a fundamental reason for that, or is it just a wart peculiar to GHC?&lt;/p&gt;\n\n&lt;p&gt;P.S. I&amp;#39;m in no way saying that the performance cost is terrible or that we should all stop using parametric polymorphism, I&amp;#39;m just baffled as to possible reasons for this strange decision.&lt;/p&gt;\n\n&lt;p&gt;Thank you.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hello /haskell/, I was reading [Johan Tibbe's talk on GHC performance](https://github.com/tibbe/talks/blob/master/bahug-2012/slides.md) and one thing baffled me, and I quote:\n\n   &gt; Polymorphic fields are always stored as pointer-to-thing, which increases memory usage and decreases cache locality. Compare:\n\n    data Tree a = Leaf | Bin a !(Tree a) !(Tree a)\n    data IntTree = IntLeaf | IntBin {-# UNPACK #-} !Int !IntTree !IntTree\n\n   &gt; Specialized data types can be faster, but at the cost of code duplication. Benchmark your code and only use them if really needed.\n\nIt turns out that Haskell's polymorphic types are not a zero-cost abstraction, and it would be perfectly normal in a unityped language where generics can only be implemented through runtime checks, but can't Haskell do better than that? After all, GHC has type inference, it knows the types of everything at compile time, it can infer typeclass instances at compile time, making typeclass methods zero-overhead, etc. So seeing that a `Tree Int` for some reason cannot be represented the same as an `IntTree` is... baffling. Is there a fundamental reason for that, or is it just a wart peculiar to GHC?\n\nP.S. I'm in no way saying that the performance cost is terrible or that we should all stop using parametric polymorphism, I'm just baffled as to possible reasons for this strange decision.\n\nThank you.", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29onpf", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "aicubierre", "media": null, "score": 27, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29onpf/why_does_ghc_always_box_polymorphic_fields_in/", "name": "t3_29onpf", "created": 1404364833.0, "url": "http://www.reddit.com/r/haskell/comments/29onpf/why_does_ghc_always_box_polymorphic_fields_in/", "author_flair_text": null, "title": "Why does GHC always box polymorphic fields in datastructures?", "created_utc": 1404336033.0, "ups": 27, "num_comments": 29, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying to store a record with a field of type &lt;code&gt;[Text]&lt;/code&gt; using Yesod/Persistent. This (fairly old) &lt;a href=\"http://www.yesodweb.com/blog/2012/02/persistent-0-8\"&gt;blog post&lt;/a&gt; mentions in the section labelled &amp;quot;Complex Data Structures Support!&amp;quot; that Persistent now supports entities with such fields, but I can&amp;#39;t figure out how to actually do that. I get errors when I try the obvious thing (i.e., just declaring an entity with a field of type &lt;code&gt;[Text]&lt;/code&gt;). Does anyone know how to do this?&lt;/p&gt;\n\n&lt;p&gt;Edit:\nThe plot thickens:&lt;/p&gt;\n\n&lt;p&gt;When I give my entity a field &lt;code&gt;questions :: [Text]&lt;/code&gt; and start the development server, I get an SQL error:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Migrating: CREATE TEMP TABLE &amp;quot;user_backup&amp;quot;(&amp;quot;id&amp;quot; INTEGER PRIMARY KEY,&amp;quot;ident&amp;quot; VARCHAR NOT NULL,&amp;quot;password&amp;quot; VARCHAR NULL,&amp;quot;questions&amp;quot; VARCHAR NOT NULL,CONSTRAINT &amp;quot;unique_user&amp;quot; UNIQUE (&amp;quot;ident&amp;quot;))\nMigrating: INSERT INTO &amp;quot;user_backup&amp;quot;(&amp;quot;id&amp;quot;,&amp;quot;ident&amp;quot;,&amp;quot;password&amp;quot;) SELECT &amp;quot;id&amp;quot;,&amp;quot;ident&amp;quot;,&amp;quot;password&amp;quot; FROM &amp;quot;user&amp;quot;\ndevel.hs: user error (SQLite3 returned ErrorConstraint while attempting to perform step.)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Second edit:&lt;/p&gt;\n\n&lt;p&gt;I deleted my database and Yesod created a new one which works, but is this avoidable?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm trying to store a record with a field of type `[Text]` using Yesod/Persistent. This (fairly old) [blog post](http://www.yesodweb.com/blog/2012/02/persistent-0-8) mentions in the section labelled \"Complex Data Structures Support!\" that Persistent now supports entities with such fields, but I can't figure out how to actually do that. I get errors when I try the obvious thing (i.e., just declaring an entity with a field of type `[Text]`). Does anyone know how to do this?\n\nEdit:\nThe plot thickens:\n\nWhen I give my entity a field `questions :: [Text]` and start the development server, I get an SQL error:\n\n    Migrating: CREATE TEMP TABLE \"user_backup\"(\"id\" INTEGER PRIMARY KEY,\"ident\" VARCHAR NOT NULL,\"password\" VARCHAR NULL,\"questions\" VARCHAR NOT NULL,CONSTRAINT \"unique_user\" UNIQUE (\"ident\"))\n    Migrating: INSERT INTO \"user_backup\"(\"id\",\"ident\",\"password\") SELECT \"id\",\"ident\",\"password\" FROM \"user\"\n    devel.hs: user error (SQLite3 returned ErrorConstraint while attempting to perform step.)\n\nSecond edit:\n\nI deleted my database and Yesod created a new one which works, but is this avoidable?\n", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29p25g", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "seriousreddit", "media": null, "score": 11, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1404346294.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29p25g/how_to_store_complex_values_with_persistent/", "name": "t3_29p25g", "created": 1404373821.0, "url": "http://www.reddit.com/r/haskell/comments/29p25g/how_to_store_complex_values_with_persistent/", "author_flair_text": null, "title": "How to store complex values with Persistent", "created_utc": 1404345021.0, "ups": 11, "num_comments": 3, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been playing around with some data compression algorithms. Basically, code that loads some data from disk and then transforms, analyzes, shuffles around, compresses etc. I thought conduits and vector / bytestring would be a natural representation for those algorithms in the Haskell world, but I&amp;#39;m having a very hard time producing code that is elegant and fast.&lt;/p&gt;\n\n&lt;p&gt;Conduit seems to have a very large overhead that makes yielding individual words between stages unacceptably slow. Here:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;runResourceT $ CB.sourceFile &amp;quot;test.dat&amp;quot; =$ CC.concat $$ CL.fold (+) 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just adding up all the bytes in a file, basically. That already takes like .5s/MB, which is pretty horrendous. It seems clear that the way to get decent performance is to always await / yield some chunk of data.&lt;/p&gt;\n\n&lt;p&gt;The first issue I have with this is that it renders many useful combinators unusable. For instance, I was hoping to use the conduitVector combinator to turn the input file into 1MB chunks of vector data for a blocksorting transform, but that seems impractical knowing how conduit performs with streams of singular Word8s.&lt;/p&gt;\n\n&lt;p&gt;Further, I struggle with actually outputting those bytestring chunks. Imagine a conduit performing some transformation, like run length coding or huffman compression. You read data from the input, and sometimes write a byte or more to the output. Just a buffer that fills till we can yield a sizeable chunk.&lt;/p&gt;\n\n&lt;p&gt;Haskell, to my knowledge, lacks a structure like an std::vector with amortized O(1) append and the compact storage of an array. We could either use a mutable vector for the chunk and progressively fill it, but then we&amp;#39;re faced with the problem of efficiently converting a vector back into a bytestring. While possible, it&amp;#39;s a bit of a low-level mess and there is no direct support for it.&lt;/p&gt;\n\n&lt;p&gt;There are no mutable / growing bytestrings (sure, I know why), and the best construct we have seems to be a bytestring builder. It seems fairly wasteful to build up mconcat&amp;#39;enated chunks of builders, but I gave that a shot. Neither brief, nor simple, but here is what I came up with:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type OutputBS = (Int, Int, BB.Builder)\n\nemptyOutputBS :: Int -&amp;gt; OutputBS\nemptyOutputBS chunkSize = (chunkSize, 0, mempty)\n\noutputByte :: Monad m =&amp;gt; Word8 -&amp;gt; OutputBS -&amp;gt; forall i. ConduitM i B.ByteString m OutputBS\noutputByte w8 obs@(chunkSize, numBytes, _)\n    | numBytes &amp;gt;= chunkSize = flushOutputBS obs &amp;gt;&amp;gt; addW8 (emptyOutputBS chunkSize)\n    | otherwise             = addW8 obs\n  where\n    addW8 (chunkSize&amp;#39;, numBytes&amp;#39;, builder&amp;#39;) =\n        return (chunkSize&amp;#39;, numBytes&amp;#39; + 1, builder&amp;#39; &amp;lt;&amp;gt; BB.word8 w8)\n\nflushOutputBS :: Monad m =&amp;gt; OutputBS -&amp;gt; forall i. ConduitM i B.ByteString m ()\nflushOutputBS (_, numBytes, builder)\n    | numBytes &amp;gt; 0 = yield (BL.toStrict $ BB.toLazyByteString builder)\n    | otherwise    = return ()\n\nprocessAndChunkOutput :: Monad m =&amp;gt; Conduit B.ByteString m B.ByteString\nprocessAndChunkOutput = flip evalStateT (emptyOutputBS 65536) loop \n  where\n    loop = (lift await) &amp;gt;&amp;gt;= \\case\n               Nothing -&amp;gt; get &amp;gt;&amp;gt;= lift . flushOutputBS\n               Just bs -&amp;gt; do forM_ [0..B.length bs - 1] $ \\i -&amp;gt; outputByteState (bs `B.index` i)\n                             loop\n    outputByteState w8 = get &amp;gt;&amp;gt;= (\\obs -&amp;gt; lift $ outputByte w8 obs) &amp;gt;&amp;gt;= put\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This works as expected, but the performance is also at .5s/MB. Replacing the builder with a simple list that&amp;#39;s reversed before being packed into a bytestring in the end is ~40% or so faster, but still too slow.&lt;/p&gt;\n\n&lt;p&gt;Looking further down the road for my compression code, I see more potential issues with this approach. Like if I want to use repa for a wavelet transform or FFT or so at a stage, again having to convert between vector and bytestring.&lt;/p&gt;\n\n&lt;p&gt;Can anybody recommend a way to speed up this conduit pipeline? Do you think this is in general a sound way of structuring the input, output, analysis and transformation stages of a compression program?&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I've been playing around with some data compression algorithms. Basically, code that loads some data from disk and then transforms, analyzes, shuffles around, compresses etc. I thought conduits and vector / bytestring would be a natural representation for those algorithms in the Haskell world, but I'm having a very hard time producing code that is elegant and fast.\n\nConduit seems to have a very large overhead that makes yielding individual words between stages unacceptably slow. Here:\n\n    runResourceT $ CB.sourceFile \"test.dat\" =$ CC.concat $$ CL.fold (+) 0\n\nJust adding up all the bytes in a file, basically. That already takes like .5s/MB, which is pretty horrendous. It seems clear that the way to get decent performance is to always await / yield some chunk of data.\n\nThe first issue I have with this is that it renders many useful combinators unusable. For instance, I was hoping to use the conduitVector combinator to turn the input file into 1MB chunks of vector data for a blocksorting transform, but that seems impractical knowing how conduit performs with streams of singular Word8s.\n\nFurther, I struggle with actually outputting those bytestring chunks. Imagine a conduit performing some transformation, like run length coding or huffman compression. You read data from the input, and sometimes write a byte or more to the output. Just a buffer that fills till we can yield a sizeable chunk.\n\nHaskell, to my knowledge, lacks a structure like an std::vector with amortized O(1) append and the compact storage of an array. We could either use a mutable vector for the chunk and progressively fill it, but then we're faced with the problem of efficiently converting a vector back into a bytestring. While possible, it's a bit of a low-level mess and there is no direct support for it.\n\nThere are no mutable / growing bytestrings (sure, I know why), and the best construct we have seems to be a bytestring builder. It seems fairly wasteful to build up mconcat'enated chunks of builders, but I gave that a shot. Neither brief, nor simple, but here is what I came up with:\n\n    type OutputBS = (Int, Int, BB.Builder)\n    \n    emptyOutputBS :: Int -&gt; OutputBS\n    emptyOutputBS chunkSize = (chunkSize, 0, mempty)\n    \n    outputByte :: Monad m =&gt; Word8 -&gt; OutputBS -&gt; forall i. ConduitM i B.ByteString m OutputBS\n    outputByte w8 obs@(chunkSize, numBytes, _)\n        | numBytes &gt;= chunkSize = flushOutputBS obs &gt;&gt; addW8 (emptyOutputBS chunkSize)\n        | otherwise             = addW8 obs\n      where\n        addW8 (chunkSize', numBytes', builder') =\n            return (chunkSize', numBytes' + 1, builder' &lt;&gt; BB.word8 w8)\n    \n    flushOutputBS :: Monad m =&gt; OutputBS -&gt; forall i. ConduitM i B.ByteString m ()\n    flushOutputBS (_, numBytes, builder)\n        | numBytes &gt; 0 = yield (BL.toStrict $ BB.toLazyByteString builder)\n        | otherwise    = return ()\n    \n    processAndChunkOutput :: Monad m =&gt; Conduit B.ByteString m B.ByteString\n    processAndChunkOutput = flip evalStateT (emptyOutputBS 65536) loop \n      where\n        loop = (lift await) &gt;&gt;= \\case\n                   Nothing -&gt; get &gt;&gt;= lift . flushOutputBS\n                   Just bs -&gt; do forM_ [0..B.length bs - 1] $ \\i -&gt; outputByteState (bs `B.index` i)\n                                 loop\n        outputByteState w8 = get &gt;&gt;= (\\obs -&gt; lift $ outputByte w8 obs) &gt;&gt;= put\n\nThis works as expected, but the performance is also at .5s/MB. Replacing the builder with a simple list that's reversed before being packed into a bytestring in the end is ~40% or so faster, but still too slow.\n\nLooking further down the road for my compression code, I see more potential issues with this approach. Like if I want to use repa for a wavelet transform or FFT or so at a stage, again having to convert between vector and bytestring.\n\nCan anybody recommend a way to speed up this conduit pipeline? Do you think this is in general a sound way of structuring the input, output, analysis and transformation stages of a compression program?\n\nThanks!", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29nvsx", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "SirRockALot1", "media": null, "score": 18, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29nvsx/how_to_get_good_performance_when_processing/", "name": "t3_29nvsx", "created": 1404348807.0, "url": "http://www.reddit.com/r/haskell/comments/29nvsx/how_to_get_good_performance_when_processing/", "author_flair_text": null, "title": "How to get good performance when processing binary data with conduit + vector/bytestring?", "created_utc": 1404320007.0, "ups": 18, "num_comments": 30, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m working on a Scrabble AI, and this is my implementation of a Trie: &lt;a href=\"https://github.com/int3/scrabble-solver/blob/53f5774453cc4f218117051f7075923455370754/Trie.hs\"&gt;https://github.com/int3/scrabble-solver/blob/53f5774453cc4f218117051f7075923455370754/Trie.hs&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I spent quite a while trying to see if it was possible to rewrite &lt;code&gt;findConstraints&lt;/code&gt; and &lt;code&gt;findAnagrams&lt;/code&gt; as folds on the trie, but I couldn&amp;#39;t wrap my head around it. Do you think it is possible / reasonable to attempt this, or does the algorithm not fit the mold of a fold?&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m also interested in comments on general code quality!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm working on a Scrabble AI, and this is my implementation of a Trie: https://github.com/int3/scrabble-solver/blob/53f5774453cc4f218117051f7075923455370754/Trie.hs\n\nI spent quite a while trying to see if it was possible to rewrite `findConstraints` and `findAnagrams` as folds on the trie, but I couldn't wrap my head around it. Do you think it is possible / reasonable to attempt this, or does the algorithm not fit the mold of a fold?\n\nI'm also interested in comments on general code quality!", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29ndnd", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "int3_", "media": null, "score": 8, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29ndnd/request_for_code_review_anagrammer_first_haskell/", "name": "t3_29ndnd", "created": 1404337339.0, "url": "http://www.reddit.com/r/haskell/comments/29ndnd/request_for_code_review_anagrammer_first_haskell/", "author_flair_text": null, "title": "Request for code review: Anagrammer (first Haskell program)", "created_utc": 1404308539.0, "ups": 8, "num_comments": 2, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "skillsmatter.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29n5os", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "TheoEngland", "media": null, "score": 8, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/PcTXfHdTWjTN0y8-.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29n5os/a_few_more_places_on_the_haskell_types_course_at/", "name": "t3_29n5os", "created": 1404330161.0, "url": "https://skillsmatter.com/courses/504-well-typed-s-guide-to-the-haskell-type-system/", "author_flair_text": null, "title": "A few more places on the Haskell Types course at Skills Matter, July 18th", "created_utc": 1404301361.0, "ups": 8, "num_comments": 1, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, there! I just wrote a package &lt;a href=\"https://hackage.haskell.org/package/Zora-1.1.9/docs/Zora-TreeGraphing.html\"&gt;(link)&lt;/a&gt; that&amp;#39;s a wrapper around the boilerplate\nnecessary to graph data structures; if you&amp;#39;ve written up any data structures that are similar to trees, this should make it extremely straightforward to generate .png files for the current state of your ADT.&lt;/p&gt;\n\n&lt;p&gt;Though the purpose of this post is to make it easier for everybody to graph their stuff, unsolicited feedback is more than welcome, should you be so inclined ;)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi, there! I just wrote a package [(link)](https://hackage.haskell.org/package/Zora-1.1.9/docs/Zora-TreeGraphing.html) that's a wrapper around the boilerplate\nnecessary to graph data structures; if you've written up any data structures that are similar to trees, this should make it extremely straightforward to generate .png files for the current state of your ADT.\n\nThough the purpose of this post is to make it easier for everybody to graph their stuff, unsolicited feedback is more than welcome, should you be so inclined ;)", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29my60", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "gravityman-142857", "media": null, "score": 10, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29my60/deadsimple_graphing_of_custom_treelike_data_types/", "name": "t3_29my60", "created": 1404320674.0, "url": "http://www.reddit.com/r/haskell/comments/29my60/deadsimple_graphing_of_custom_treelike_data_types/", "author_flair_text": null, "title": "Dead-simple graphing of custom tree-like data types", "created_utc": 1404291874.0, "ups": 10, "num_comments": 23, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m having a problem installing GHC on my device running Apple ARM Darwin (it&amp;#39;s a jailbroken device). I already have gcc (compiler) so I was hoping to build a version of ghc for device. &lt;/p&gt;\n\n&lt;p&gt;When I do &amp;#39;distrib/hc-build&amp;#39; I get  an error saying can&amp;#39;t workout build platform. &lt;/p&gt;\n\n&lt;p&gt;Does anybody know how to fix this or install ghc on ARM Darwin?&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://i.imgur.com/obl031r.jpg\"&gt;http://i.imgur.com/obl031r.jpg&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm having a problem installing GHC on my device running Apple ARM Darwin (it's a jailbroken device). I already have gcc (compiler) so I was hoping to build a version of ghc for device. \n\nWhen I do 'distrib/hc-build' I get  an error saying can't workout build platform. \n\nDoes anybody know how to fix this or install ghc on ARM Darwin?\n\nhttp://i.imgur.com/obl031r.jpg", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29nhkz", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "H1DD3NT3CH", "media": null, "score": 2, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29nhkz/help_installing_ghc/", "name": "t3_29nhkz", "created": 1404340158.0, "url": "http://www.reddit.com/r/haskell/comments/29nhkz/help_installing_ghc/", "author_flair_text": null, "title": "Help installing GHC", "created_utc": 1404311358.0, "ups": 2, "num_comments": 6, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "ejenk.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29kv2y", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "waffle_ss", "media": null, "score": 50, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29kv2y/why_dependently_typed_programming_will_one_day/", "name": "t3_29kv2y", "created": 1404265066.0, "url": "http://ejenk.com/blog/why-dependently-typed-programming-will-one-day-rock-your-world.html", "author_flair_text": null, "title": "Why Dependently Typed Programming Will (One Day) Rock Your World", "created_utc": 1404236266.0, "ups": 50, "num_comments": 152, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;import Test.HUnit (runTestTT,Test(TestLabel,TestList),(~?))\nimport Data.Function (on)&lt;/p&gt;\n\n&lt;p&gt;-- | A very simple data type for expressions.&lt;/p&gt;\n\n&lt;p&gt;data Expr = Const Int | Add Expr Expr deriving Show&lt;/p&gt;\n\n&lt;p&gt;-- | &amp;#39;Expression&amp;#39; is an instance of &amp;#39;Num&amp;#39;. You will get warnings because\n--   many required methods are not implemented.&lt;/p&gt;\n\n&lt;p&gt;instance Num Expr where\n    fromInteger = Const . fromInteger\n    (+) = Add&lt;/p&gt;\n\n&lt;p&gt;-- | Equality of &amp;#39;Expr&amp;#39;s modulo associativity.&lt;/p&gt;\n\n&lt;p&gt;instance Eq Expr where\n    (==) = error &amp;quot;Not yet implementd: (==)&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;-- | A test expression.&lt;/p&gt;\n\n&lt;p&gt;testexpression1 :: Expr\ntestexpression1 = 3 + (4 + 5)&lt;/p&gt;\n\n&lt;p&gt;-- | A test expression.&lt;/p&gt;\n\n&lt;p&gt;testexpression2 :: Expr\ntestexpression2 = (3 + 4) + 5&lt;/p&gt;\n\n&lt;p&gt;-- | A test expression.&lt;/p&gt;\n\n&lt;p&gt;testexpression3 :: Expr\ntestexpression3 = 2 + 5 + 5&lt;/p&gt;\n\n&lt;p&gt;_________________________-&lt;/p&gt;\n\n&lt;p&gt;testexpression1 should be equal to testexpression2. And they should ne NOT equal to testexpression3. &lt;/p&gt;\n\n&lt;p&gt;Yes, it&amp;#39;s homework, so I&amp;#39;m searching for hints, no solutions! :)&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "import Test.HUnit (runTestTT,Test(TestLabel,TestList),(~?))\nimport Data.Function (on)\n\n-- | A very simple data type for expressions.\n\ndata Expr = Const Int | Add Expr Expr deriving Show\n\n-- | 'Expression' is an instance of 'Num'. You will get warnings because\n--   many required methods are not implemented.\n\ninstance Num Expr where\n    fromInteger = Const . fromInteger\n    (+) = Add\n\n-- | Equality of 'Expr's modulo associativity.\n\ninstance Eq Expr where\n    (==) = error \"Not yet implementd: (==)\"\n\n\n-- | A test expression.\n\ntestexpression1 :: Expr\ntestexpression1 = 3 + (4 + 5)\n\n-- | A test expression.\n\ntestexpression2 :: Expr\ntestexpression2 = (3 + 4) + 5\n\n-- | A test expression.\n\ntestexpression3 :: Expr\ntestexpression3 = 2 + 5 + 5\n\n_________________________-\n\ntestexpression1 should be equal to testexpression2. And they should ne NOT equal to testexpression3. \n\nYes, it's homework, so I'm searching for hints, no solutions! :)\n\nThanks in advance. ", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29munm", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "fuuman1", "media": null, "score": 0, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1404289498.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29munm/evaluate_and_compare_two_expressions/", "name": "t3_29munm", "created": 1404316028.0, "url": "http://www.reddit.com/r/haskell/comments/29munm/evaluate_and_compare_two_expressions/", "author_flair_text": null, "title": "Evaluate and compare two expressions", "created_utc": 1404287228.0, "ups": 0, "num_comments": 7, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "haskell-web.blogspot.com.es", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29lapx", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "agocorona", "media": null, "score": 8, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/OMOfEwkbBS_2P9ff.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29lapx/hplayground_write_haskell_code_for_the_browser/", "name": "t3_29lapx", "created": 1404274218.0, "url": "http://haskell-web.blogspot.com.es/2014/07/hplayground-translate-your-console.html", "author_flair_text": null, "title": "hplayground: write #haskell code for the browser console-like. get reactive, window and spreadsheet effects for free.", "created_utc": 1404245418.0, "ups": 8, "num_comments": 14, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "haskell.org", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29jw0s", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "alexander_b", "media": null, "score": 51, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29jw0s/whats_wrong_with_string/", "name": "t3_29jw0s", "created": 1404238539.0, "url": "http://www.haskell.org/pipermail/haskell-cafe/2014-June/114745.html", "author_flair_text": null, "title": "What's wrong with String", "created_utc": 1404209739.0, "ups": 51, "num_comments": 123, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi there! The StackOverflow answer &lt;a href=\"http://stackoverflow.com/a/16447511\"&gt;here&lt;/a&gt; talks about monads in terms of &amp;quot;Turing-complete compositions&amp;quot;, with a good bit of debate in its comments about whether that&amp;#39;s a meaningful statement.&lt;/p&gt;\n\n&lt;p&gt;Since it seems so natural to talk about, e.g., Functor-Applicative-Monad in terms of relative &amp;quot;power&amp;quot;, I wonder if a formalization of that &amp;quot;power&amp;quot; in terms of computational complexity exists (possibly, e.g., a way towards showing whether a given kind allows for &amp;quot;Turing-completeness&amp;quot; in some way). Are there any references around for this kind of work?&lt;/p&gt;\n\n&lt;p&gt;Apologies if this isn&amp;#39;t clear; because the information surrounding it is so scarce, I&amp;#39;m having a little trouble trying to pose the question clearly.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi there! The StackOverflow answer [here](http://stackoverflow.com/a/16447511) talks about monads in terms of \"Turing-complete compositions\", with a good bit of debate in its comments about whether that's a meaningful statement.\n\nSince it seems so natural to talk about, e.g., Functor-Applicative-Monad in terms of relative \"power\", I wonder if a formalization of that \"power\" in terms of computational complexity exists (possibly, e.g., a way towards showing whether a given kind allows for \"Turing-completeness\" in some way). Are there any references around for this kind of work?\n\nApologies if this isn't clear; because the information surrounding it is so scarce, I'm having a little trouble trying to pose the question clearly.", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29mcbv", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "babblingbree", "media": null, "score": 2, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29mcbv/expressing_complexity_of_higher_kindstype_classes/", "name": "t3_29mcbv", "created": 1404299470.0, "url": "http://www.reddit.com/r/haskell/comments/29mcbv/expressing_complexity_of_higher_kindstype_classes/", "author_flair_text": null, "title": "Expressing \"complexity\" of higher kinds/type classes?", "created_utc": 1404270670.0, "ups": 2, "num_comments": 14, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am web developer who works primarily in Python and Javascript, and while often the discussion in this subreddit is over my head, I have found the small bits of Haskell that I have learned to be enlightening such that I have recently decided to start building stuff where I can in Haskell in order to advance my understanding of the language. &lt;/p&gt;\n\n&lt;p&gt;Anyway, apologies if this does not belong here, but I&amp;#39;m stuck on a problem and I can&amp;#39;t seem to figure it out and it finally occurred to me to ask you guys for help.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/pellagic-puffbomb/324cf7f50f4480e8a8d1\"&gt;Here&amp;#39;s a gist of a module I built yesterday&lt;/a&gt; in order to pull and count IP addresses from Django Tracebacks. &lt;/p&gt;\n\n&lt;p&gt;I can use it on the REPL (GHCi) and get results that I expect in the following way:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;unlines . map flatten . countUnique . ipOnly . spammers &amp;lt;$&amp;gt; readFile &amp;quot;tracebacks.txt&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, I can&amp;#39;t seem to figure out how to organize the main block. It compiles but does not seem to do anything with input or output (I was hoping to name an infile and outfile on the command-line). Someone here will probably see right away what I&amp;#39;m doing wrong.&lt;/p&gt;\n\n&lt;p&gt;In addition, I would be happy to take any other suggestions or critiques you might have of this small script. I crammed a lot of stuff in there in order to experiment with the language a bit, but I&amp;#39;m sure there are mistakes or poor assumptions I have made. In fact, I noticed a discussion today talking about using Data.Text instead of String (which I am relying on pretty heavily here), so I was thinking of rewriting this using Data.Text.&lt;/p&gt;\n\n&lt;p&gt;Thanks for any suggestions you might have. &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;EDIT&lt;/em&gt;: I updated the gist with a working &lt;code&gt;main&lt;/code&gt;, but I realize now I should probably have kept it broken for people who come to this thread late. The first version can be seen in the revision history: &lt;a href=\"https://gist.github.com/pellagic-puffbomb/324cf7f50f4480e8a8d1/revisions\"&gt;https://gist.github.com/pellagic-puffbomb/324cf7f50f4480e8a8d1/revisions&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I am web developer who works primarily in Python and Javascript, and while often the discussion in this subreddit is over my head, I have found the small bits of Haskell that I have learned to be enlightening such that I have recently decided to start building stuff where I can in Haskell in order to advance my understanding of the language. \n\nAnyway, apologies if this does not belong here, but I'm stuck on a problem and I can't seem to figure it out and it finally occurred to me to ask you guys for help.\n\n[Here's a gist of a module I built yesterday](https://gist.github.com/pellagic-puffbomb/324cf7f50f4480e8a8d1) in order to pull and count IP addresses from Django Tracebacks. \n\nI can use it on the REPL (GHCi) and get results that I expect in the following way:\n\n    unlines . map flatten . countUnique . ipOnly . spammers &lt;$&gt; readFile \"tracebacks.txt\"\n\nHowever, I can't seem to figure out how to organize the main block. It compiles but does not seem to do anything with input or output (I was hoping to name an infile and outfile on the command-line). Someone here will probably see right away what I'm doing wrong.\n\nIn addition, I would be happy to take any other suggestions or critiques you might have of this small script. I crammed a lot of stuff in there in order to experiment with the language a bit, but I'm sure there are mistakes or poor assumptions I have made. In fact, I noticed a discussion today talking about using Data.Text instead of String (which I am relying on pretty heavily here), so I was thinking of rewriting this using Data.Text.\n\nThanks for any suggestions you might have. \n\n\n*EDIT*: I updated the gist with a working `main`, but I realize now I should probably have kept it broken for people who come to this thread late. The first version can be seen in the revision history: https://gist.github.com/pellagic-puffbomb/324cf7f50f4480e8a8d1/revisions", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29kl7v", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "erewok", "media": null, "score": 14, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1404233354.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29kl7v/haskell_beginner_stuck_on_commandline_io/", "name": "t3_29kl7v", "created": 1404259407.0, "url": "http://www.reddit.com/r/haskell/comments/29kl7v/haskell_beginner_stuck_on_commandline_io/", "author_flair_text": null, "title": "Haskell Beginner Stuck on Command-Line IO", "created_utc": 1404230607.0, "ups": 14, "num_comments": 18, "visited": true, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;How does this function work?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;foo :: (a -&amp;gt; b -&amp;gt; a) -&amp;gt; a -&amp;gt; [b] -&amp;gt; a\nfoo f a bs = foldr (\\b g x -&amp;gt; g (f x b)) id bs a\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;From what I understand, foldr normally takes 3 parameters, and the first parameter is normally a binary function.  In the function foo, foldr seems to have 4 parameters instead of 3, and the first parameter seems to be a ternary function.&lt;/p&gt;\n\n&lt;p&gt;Suppose I guessed from &lt;a href=\"http://www.haskell.org/hoogle/?hoogle=%28a+-%3E+b+-%3E+a%29+-%3E+a+-%3E+%5Bb%5D+-%3E+a\"&gt;here&lt;/a&gt; that foo is an implementation of foldl.  How would I prove it?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "How does this function work?\n\n    foo :: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a\n    foo f a bs = foldr (\\b g x -&gt; g (f x b)) id bs a\n\nFrom what I understand, foldr normally takes 3 parameters, and the first parameter is normally a binary function.  In the function foo, foldr seems to have 4 parameters instead of 3, and the first parameter seems to be a ternary function.\n\nSuppose I guessed from [here](http://www.haskell.org/hoogle/?hoogle=%28a+-%3E+b+-%3E+a%29+-%3E+a+-%3E+%5Bb%5D+-%3E+a) that foo is an implementation of foldl.  How would I prove it?\n", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29lc4f", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "ronguida", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29lc4f/learn_help_explaining_a_strange_use_of_foldr/", "name": "t3_29lc4f", "created": 1404275112.0, "url": "http://www.reddit.com/r/haskell/comments/29lc4f/learn_help_explaining_a_strange_use_of_foldr/", "author_flair_text": null, "title": "[learn] Help explaining a strange use of foldr", "created_utc": 1404246312.0, "ups": 3, "num_comments": 5, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;We have a number of openings for PhD study at the University of Birmingham, and we also have an &lt;em&gt;imminent funding deadline&lt;/em&gt;, so please contact me (or any of us in the theory group at Birmingham) immediately if you&amp;#39;re interested. &lt;/p&gt;\n\n&lt;p&gt;I personally am looking for students interested in designing the next generation of functional languages. You can find &lt;a href=\"http://semantic-domain.blogspot.co.uk/2014/07/phd-opportunities-at-university-of.html\"&gt;a fuller announcement here&lt;/a&gt;. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "We have a number of openings for PhD study at the University of Birmingham, and we also have an *imminent funding deadline*, so please contact me (or any of us in the theory group at Birmingham) immediately if you're interested. \n\nI personally am looking for students interested in designing the next generation of functional languages. You can find [a fuller announcement here](http://semantic-domain.blogspot.co.uk/2014/07/phd-opportunities-at-university-of.html). ", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29juqp", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "neelk", "media": null, "score": 16, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29juqp/phd_opportunities_at_the_university_of_birmingham/", "name": "t3_29juqp", "created": 1404236950.0, "url": "http://www.reddit.com/r/haskell/comments/29juqp/phd_opportunities_at_the_university_of_birmingham/", "author_flair_text": null, "title": "PhD opportunities at the University of Birmingham", "created_utc": 1404208150.0, "ups": 16, "num_comments": 3, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m writing a small program (an extension of a Pokemon game that got posted here a while ago) where I&amp;#39;m trying to not use IO as much as possible. The program relies on randomness (picking a random Pokemon and move) and on writing (say things like &amp;quot;Pokemon X attacked you for Y damage!&amp;quot;). &lt;/p&gt;\n\n&lt;p&gt;Again, I&amp;#39;m trying NOT to use IO, so instead I&amp;#39;m using &lt;code&gt;Rand&lt;/code&gt; (Control.Monad.Random) and &lt;code&gt;Writer&lt;/code&gt;. Now, I have a couple of functions that return &lt;code&gt;Rand g a&lt;/code&gt; (where &lt;code&gt;a&lt;/code&gt; can be a pokemon name or move), but I would like to &amp;quot;log&amp;quot; the name and move after they come in. &lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s a simplified version of what I&amp;#39;m trying to do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;battle :: _\nbattle = do\n    move &amp;lt;- getRandomMove -- returns an Rand g Move\n    tell [&amp;quot;Pokemon attacked you with &amp;quot; ++ name move]\n    damage &amp;lt;- calculateDamage -- returns an Rand g Damage\n    tell [&amp;quot;And did &amp;quot; ++ damage]\n    battle\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course, this doesn&amp;#39;t work (I&amp;#39;m mixing my Rands and Writers). I thought &amp;quot;maybe this is what Transformers are for?&amp;quot;). I tried using WriterT and RandT in a combination of ways, but I always go stuck, which makes me think that&amp;#39;s not right either. &lt;/p&gt;\n\n&lt;p&gt;So my question are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Are transformers the answer to my problem?&lt;/li&gt;\n&lt;li&gt;If so, how do you use them? (I&amp;#39;m failing to understands them from the tutorials I&amp;#39;ve found online)&lt;/li&gt;\n&lt;li&gt;If not, how could I solve this problem?&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Edit: Formatting\nEdit2: battle is recursive&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm writing a small program (an extension of a Pokemon game that got posted here a while ago) where I'm trying to not use IO as much as possible. The program relies on randomness (picking a random Pokemon and move) and on writing (say things like \"Pokemon X attacked you for Y damage!\"). \n\nAgain, I'm trying NOT to use IO, so instead I'm using `Rand` (Control.Monad.Random) and `Writer`. Now, I have a couple of functions that return `Rand g a` (where `a` can be a pokemon name or move), but I would like to \"log\" the name and move after they come in. \n\nHere's a simplified version of what I'm trying to do:\n    \n    battle :: _\n    battle = do\n        move &lt;- getRandomMove -- returns an Rand g Move\n        tell [\"Pokemon attacked you with \" ++ name move]\n        damage &lt;- calculateDamage -- returns an Rand g Damage\n        tell [\"And did \" ++ damage]\n        battle\n\nOf course, this doesn't work (I'm mixing my Rands and Writers). I thought \"maybe this is what Transformers are for?\"). I tried using WriterT and RandT in a combination of ways, but I always go stuck, which makes me think that's not right either. \n\nSo my question are:\n\n* Are transformers the answer to my problem?\n* If so, how do you use them? (I'm failing to understands them from the tutorials I've found online)\n* If not, how could I solve this problem?\n\nEdit: Formatting\nEdit2: battle is recursive", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29kdic", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "Die-Nacht", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1404268458.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29kdic/are_transformers_the_answer_to_this_problem/", "name": "t3_29kdic", "created": 1404254607.0, "url": "http://www.reddit.com/r/haskell/comments/29kdic/are_transformers_the_answer_to_this_problem/", "author_flair_text": null, "title": "Are transformers the answer to this problem?", "created_utc": 1404225807.0, "ups": 5, "num_comments": 13, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "stackoverflow.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29kc7z", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "hxr", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/80tnunXhQJXBAP3L.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29kc7z/why_doesnt_hxts_xpath_searcher_doesnt_return_a/", "name": "t3_29kc7z", "created": 1404253740.0, "url": "http://stackoverflow.com/questions/24500978/why-doesnt-hxts-xpath-searcher-doesnt-return-a-simple-query", "author_flair_text": null, "title": "Why doesn't HXT's xpath searcher doesn't return a simple query?", "created_utc": 1404224940.0, "ups": 3, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "homepages.cwi.nl", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29i94o", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "gregK", "media": null, "score": 46, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29i94o/re\ufb02ection_without_remorse_revealing_a_hidden/", "name": "t3_29i94o", "created": 1404191800.0, "url": "http://homepages.cwi.nl/~ploeg/papers/zseq.pdf", "author_flair_text": null, "title": "Re\ufb02ection without Remorse: Revealing a hidden sequence to speed up monadic re\ufb02ection [pdf]", "created_utc": 1404163000.0, "ups": 46, "num_comments": 34, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "youtube.com", "banned_by": null, "media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=http%3A%2F%2Fwww.youtube.com%2Fembed%2FhsacAUEgWD4%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DhsacAUEgWD4&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FhsacAUEgWD4%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "http://www.youtube.com/", "description": "The Computing Faculty Seminar Series presents lectures by the Computing faculty within Drexel's new College of Computing &amp; Informatics. Dr. Geoffrey Mainland, presents his research on compiling high-level declarative languages into efficient low-level code.", "title": "Computing Faculty Seminar Series: From High-level Haskell to Efficient Low-level Code", "url": "http://www.youtube.com/watch?v=hsacAUEgWD4", "author_name": "Drexel University College of Computing &amp; Informatics", "height": 338, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FhsacAUEgWD4%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DhsacAUEgWD4&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FhsacAUEgWD4%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "version": "1.0", "provider_name": "YouTube", "thumbnail_url": "https://i.embed.ly/1/image?url=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FhsacAUEgWD4%2Fhqdefault.jpg&amp;key=b1e305db91cf4aa5a86b732cc9fffceb", "type": "video", "thumbnail_height": 360, "author_url": "http://www.youtube.com/user/drexelcci"}}, "link_flair_text": null, "id": "29ikby", "gilded": 0, "secure_media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FhsacAUEgWD4%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DhsacAUEgWD4&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FhsacAUEgWD4%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "clicked": false, "stickied": false, "author": "hmltyp", "media": {"type": "youtube.com", "oembed": {"provider_url": "http://www.youtube.com/", "description": "The Computing Faculty Seminar Series presents lectures by the Computing faculty within Drexel's new College of Computing &amp; Informatics. Dr. Geoffrey Mainland, presents his research on compiling high-level declarative languages into efficient low-level code.", "title": "Computing Faculty Seminar Series: From High-level Haskell to Efficient Low-level Code", "url": "http://www.youtube.com/watch?v=hsacAUEgWD4", "author_name": "Drexel University College of Computing &amp; Informatics", "height": 338, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=http%3A%2F%2Fwww.youtube.com%2Fembed%2FhsacAUEgWD4%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DhsacAUEgWD4&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FhsacAUEgWD4%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "version": "1.0", "provider_name": "YouTube", "thumbnail_url": "http://i1.ytimg.com/vi/hsacAUEgWD4/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "http://www.youtube.com/user/drexelcci"}}, "score": 25, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/AZD72TItrYUwJLmA.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29ikby/from_highlevel_haskell_to_efficient_lowlevel_code/", "name": "t3_29ikby", "created": 1404198739.0, "url": "http://www.youtube.com/watch?v=hsacAUEgWD4", "author_flair_text": null, "title": "From High-level Haskell to Efficient Low-level Code", "created_utc": 1404169939.0, "ups": 25, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "engineering.silk.co", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29h32i", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "bergmark", "media": null, "score": 92, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/A9brNLSC1J4NPRGK.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29h32i/announcing_rest_a_haskell_rest_framework/", "name": "t3_29h32i", "created": 1404167052.0, "url": "http://engineering.silk.co/post/90354057868/announcing-rest-a-haskell-rest-framework", "author_flair_text": null, "title": "Announcing rest - A Haskell REST framework", "created_utc": 1404138252.0, "ups": 92, "num_comments": 38, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "haskelldata.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29k8zj", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "jcbbjjttt", "media": null, "score": 2, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/N1DKgs7f05bvu_pO.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29k8zj/haskell_data_analysis_book_is_now_available_for/", "name": "t3_29k8zj", "created": 1404251413.0, "url": "http://haskelldata.com/", "author_flair_text": null, "title": "Haskell Data Analysis Book is now Available for Purchase", "created_utc": 1404222613.0, "ups": 2, "num_comments": 5, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "fuuzetsu.co.uk", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29gloq", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "ibotty", "media": null, "score": 29, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29gloq/f\u016bzetsus_corner_my_experience_with_nixos/", "name": "t3_29gloq", "created": 1404149753.0, "url": "http://fuuzetsu.co.uk/blog/posts/2014-06-28-My-experience-with-NixOS.html", "author_flair_text": null, "title": "F\u016bzetsu's Corner - My experience with NixOS", "created_utc": 1404120953.0, "ups": 29, "num_comments": 29, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "australianscience.com.au", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29heiv", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "slacket", "media": null, "score": 2, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29heiv/scalable_io_event_handling_for_ghc/", "name": "t3_29heiv", "created": 1404174034.0, "url": "http://www.australianscience.com.au/research/google/36841.pdf", "author_flair_text": null, "title": "Scalable I/O Event Handling for GHC", "created_utc": 1404145234.0, "ups": 2, "num_comments": 4, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "neilmitchell.blogspot.com.es", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29fjg4", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "DanielDiaz", "media": null, "score": 30, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/kfnghbm2mfprZqP-.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29fjg4/neil_mitchells_haskell_blog_optimisation_with/", "name": "t3_29fjg4", "created": 1404115466.0, "url": "http://neilmitchell.blogspot.com.es/2014/06/optimisation-with-continuations.html", "author_flair_text": null, "title": "Neil Mitchell's Haskell Blog: Optimisation with Continuations", "created_utc": 1404086666.0, "ups": 30, "num_comments": 15, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I am quite new to Haskell and functional programming in general.  My question has to do with side effects.  I&amp;#39;m working through Yet Another Haskell Tutorial and am at the section on user input.  Specifically my question has to do with this quote on page 32 of the PDF:&lt;/p&gt;\n\n&lt;p&gt;&amp;quot;After all, suppose you have a function that reads a string from the keyboard. If you call this function twice, and the user types something the first time and something else the second time, then you no longer have a function, since it would return two different values.&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;What if the user types the same name twice?  In other words given the same input:  &amp;quot;Kelly&amp;quot;, the function always outputs the same message: &amp;quot;Hello Kelly&amp;quot;  I don&amp;#39;t understand how this is producing a side effect since given the same input, the function produces the same output.  This seems to me to be the same as calling a factorial function with the input of 5 and getting output 120.  Or calling the function with 6 and getting 720.&lt;/p&gt;\n\n&lt;p&gt;I hope this question isn&amp;#39;t too elementary for the subreddit, but I appreciate any help for a n00b like me!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hello, I am quite new to Haskell and functional programming in general.  My question has to do with side effects.  I'm working through Yet Another Haskell Tutorial and am at the section on user input.  Specifically my question has to do with this quote on page 32 of the PDF:\n\n\"After all, suppose you have a function that reads a string from the keyboard. If you call this function twice, and the user types something the first time and something else the second time, then you no longer have a function, since it would return two different values.\"\n\nWhat if the user types the same name twice?  In other words given the same input:  \"Kelly\", the function always outputs the same message: \"Hello Kelly\"  I don't understand how this is producing a side effect since given the same input, the function produces the same output.  This seems to me to be the same as calling a factorial function with the input of 5 and getting output 120.  Or calling the function with 6 and getting 720.\n\nI hope this question isn't too elementary for the subreddit, but I appreciate any help for a n00b like me!", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29fjie", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "bacaholic", "media": null, "score": 9, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29fjie/side_effects/", "name": "t3_29fjie", "created": 1404115500.0, "url": "http://www.reddit.com/r/haskell/comments/29fjie/side_effects/", "author_flair_text": null, "title": "Side Effects?", "created_utc": 1404086700.0, "ups": 9, "num_comments": 20, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Due to criminal negligence of &lt;a href=\"http://blip.tv\"&gt;http://blip.tv&lt;/a&gt; that &lt;a href=\"http://support.blip.tv/entries/23007795\"&gt;they themselves confess to&lt;/a&gt;, the XMonad talks in OSCON 2007 were deleted.&lt;/p&gt;\n\n&lt;p&gt;Are there any surviving copies of this talk?&lt;/p&gt;\n\n&lt;p&gt;Sad reminders of this infamous decision can be witnessed in:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;The &lt;a href=\"https://en.wikipedia.org/wiki/Xmonad#External_links\"&gt;XMonad page of Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The &lt;a href=\"http://www.haskell.org/haskellwiki/Video_presentations#Introductions_to_Haskell\"&gt;Video presentations page&lt;/a&gt; of Haskell.org&amp;#39;s wiki&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The &lt;a href=\"http://xmonad.org/videos.html\"&gt;videos page&lt;/a&gt; on the XMonad website.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The dead links themselves of the &lt;a href=\"http://blip.tv/file/324976\"&gt;first&lt;/a&gt; and &lt;a href=\"http://blip.tv/file/325646\"&gt;second&lt;/a&gt; videos.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Due to criminal negligence of http://blip.tv that [they themselves confess to](http://support.blip.tv/entries/23007795), the XMonad talks in OSCON 2007 were deleted.\n\nAre there any surviving copies of this talk?\n\nSad reminders of this infamous decision can be witnessed in:\n\n* The [XMonad page of Wikipedia](https://en.wikipedia.org/wiki/Xmonad#External_links)\n\n* The [Video presentations page](http://www.haskell.org/haskellwiki/Video_presentations#Introductions_to_Haskell) of Haskell.org's wiki\n\n* The [videos page](http://xmonad.org/videos.html) on the XMonad website.\n\n* The dead links themselves of the [first](http://blip.tv/file/324976) and [second](http://blip.tv/file/325646) videos.", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29ezhd", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "MakeRoom", "media": null, "score": 17, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1404072954.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29ezhd/any_surviving_copies_of_simon_peyton_jones_xmonad/", "name": "t3_29ezhd", "created": 1404101563.0, "url": "http://www.reddit.com/r/haskell/comments/29ezhd/any_surviving_copies_of_simon_peyton_jones_xmonad/", "author_flair_text": null, "title": "Any surviving copies of Simon Peyton Jones' XMonad talk videos on OSCON 2007?", "created_utc": 1404072763.0, "ups": 17, "num_comments": 3, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi!\nLast week I launched &lt;a href=\"http://quicktypesearch.com/\"&gt;QuickTypeSearch&lt;/a&gt;, a type searcher based on type normalization. I want to thanks you for all the feedback I received, and to inform that I have updated the site implementing some of those ideas (now it also includes class methods). I also indexed more pacakges so hopefully, now it can be a bit more usefull :).&lt;/p&gt;\n\n&lt;p&gt;Some query examples: &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"http://quicktypesearch.com/tosearch?query=%5Ba%5D+-%3E+%28a+-%3E+Maybe+b%29+-%3E+%5Bb%5D\"&gt;[a] -&amp;gt; (a -&amp;gt; Maybe b) -&amp;gt; [b]&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"http://quicktypesearch.com/tosearch?query=Eq+b+%3D%3E+%28a+-%3E+b%29+-%3E+%5Ba%5D+-%3E+%5B%5Ba%5D%5D\"&gt;Eq b =&amp;gt; (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [[a]]&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"http://quicktypesearch.com/tosearch?query=Monad+m+%3D%3E+Either+a+b+-%3E+EitherT+a+m+b\"&gt;Monad m =&amp;gt; Either a b -&amp;gt; EitherT a m b&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"http://quicktypesearch.com/tosearch?query=Int%23+-%3E+Int%23\"&gt;Int# -&amp;gt; Int#&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi!\nLast week I launched [QuickTypeSearch](http://quicktypesearch.com/), a type searcher based on type normalization. I want to thanks you for all the feedback I received, and to inform that I have updated the site implementing some of those ideas (now it also includes class methods). I also indexed more pacakges so hopefully, now it can be a bit more usefull :).\n\n\nSome query examples: \n\n* [[a] -&gt; (a -&gt; Maybe b) -&gt; [b]](http://quicktypesearch.com/tosearch?query=[a]+-%3E+%28a+-%3E+Maybe+b%29+-%3E+[b])\n* [Eq b =&gt; (a -&gt; b) -&gt; [a] -&gt; [[a]]](http://quicktypesearch.com/tosearch?query=Eq+b+%3D%3E+%28a+-%3E+b%29+-%3E+[a]+-%3E+[[a]])\n* [Monad m =&gt; Either a b -&gt; EitherT a m b](http://quicktypesearch.com/tosearch?query=Monad+m+%3D%3E+Either+a+b+-%3E+EitherT+a+m+b)\n* [Int# -&gt; Int#](http://quicktypesearch.com/tosearch?query=Int%23+-%3E+Int%23)\n\n", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29eo59", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "sofosure", "media": null, "score": 19, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29eo59/quicktypesearch_upgraded_and_thanks_for_the/", "name": "t3_29eo59", "created": 1404093844.0, "url": "http://www.reddit.com/r/haskell/comments/29eo59/quicktypesearch_upgraded_and_thanks_for_the/", "author_flair_text": null, "title": "QuickTypeSearch: Upgraded and thanks for the feedback!", "created_utc": 1404065044.0, "ups": 19, "num_comments": 17, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have to perform an operation on every other element of the list starting from the end; I&amp;#39;m curious if there&amp;#39;s a good way of doing that better than calculating the length of the list beforehand or reversing it, performing the operation, and reversing again. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I have to perform an operation on every other element of the list starting from the end; I'm curious if there's a good way of doing that better than calculating the length of the list beforehand or reversing it, performing the operation, and reversing again. ", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29g9j6", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "iobender", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29g9j6/is_there_a_good_way_to_work_backwards_on_a_list/", "name": "t3_29g9j6", "created": 1404135681.0, "url": "http://www.reddit.com/r/haskell/comments/29g9j6/is_there_a_good_way_to_work_backwards_on_a_list/", "author_flair_text": null, "title": "Is there a good way to work backwards on a list?", "created_utc": 1404106881.0, "ups": 3, "num_comments": 18, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;edit: Thanks a lot for the suggestions!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "edit: Thanks a lot for the suggestions!", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29eke6", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "Apterygiformes", "media": null, "score": 12, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1404064665.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29eke6/basic_program_ideas_for_learning_about_monads/", "name": "t3_29eke6", "created": 1404091095.0, "url": "http://www.reddit.com/r/haskell/comments/29eke6/basic_program_ideas_for_learning_about_monads/", "author_flair_text": null, "title": "Basic program ideas for learning about Monads?", "created_utc": 1404062295.0, "ups": 12, "num_comments": 12, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So, I know that I can use PrimMonad to write a function that deals with mutable vectors in ST and IO like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;modifyVector :: PrimMonad m =&amp;gt; VUM.MVector (PrimState m) Int -&amp;gt; m ()\nmodifyVector vec = do\n    VUM.write vec 0 100\n    newVec &amp;lt;- VUM.replicate 100 (0 :: Int)\n    return ()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But how would I handle having a record with a vector inside in such a situation?&lt;/p&gt;\n\n&lt;p&gt;Say I got&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data PrimMonad m =&amp;gt; ContainsVector m = ContainsVector\n    { cvVector :: VUM.MVector (PrimState m) Int\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then adding&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let cvVec = ContainsVector newVec\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to modifyVector does not work. In Haskell you can&amp;#39;t reference the types from your function type declaration inside the function itself (unfortunately?), so I wouldn&amp;#39;t know how to write an explicit type signature for my ContainsVector creation, and the compiler can&amp;#39;t seem to deduce by itself that I want the record&amp;#39;s monad type to be the same as my function. Any messing around with RankNTypes / ExistentialQuantification was also unsuccessful. Not that I&amp;#39;d consider myself an expert in that, every time I mess with the ST monad or ExistentialQuantification, I get rather confused ;-)&lt;/p&gt;\n\n&lt;p&gt;What&amp;#39;s the correct approach here?&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "So, I know that I can use PrimMonad to write a function that deals with mutable vectors in ST and IO like this:\n\n    modifyVector :: PrimMonad m =&gt; VUM.MVector (PrimState m) Int -&gt; m ()\n    modifyVector vec = do\n        VUM.write vec 0 100\n        newVec &lt;- VUM.replicate 100 (0 :: Int)\n        return ()\n\nBut how would I handle having a record with a vector inside in such a situation?\n\nSay I got\n\n    data PrimMonad m =&gt; ContainsVector m = ContainsVector\n        { cvVector :: VUM.MVector (PrimState m) Int\n        }\n\nand then adding\n\n    let cvVec = ContainsVector newVec\n\nto modifyVector does not work. In Haskell you can't reference the types from your function type declaration inside the function itself (unfortunately?), so I wouldn't know how to write an explicit type signature for my ContainsVector creation, and the compiler can't seem to deduce by itself that I want the record's monad type to be the same as my function. Any messing around with RankNTypes / ExistentialQuantification was also unsuccessful. Not that I'd consider myself an expert in that, every time I mess with the ST monad or ExistentialQuantification, I get rather confused ;-)\n\nWhat's the correct approach here?\n\nThanks!", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29ev37", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "SirRockALot1", "media": null, "score": 4, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1404070352.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29ev37/primmonad_vector_and_records_stupid_question/", "name": "t3_29ev37", "created": 1404098594.0, "url": "http://www.reddit.com/r/haskell/comments/29ev37/primmonad_vector_and_records_stupid_question/", "author_flair_text": null, "title": "PrimMonad, Vector and records (stupid question)", "created_utc": 1404069794.0, "ups": 4, "num_comments": 8, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello,&lt;/p&gt;\n\n&lt;p&gt;let&amp;#39;s say I have a data structure like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data MyData = MyData { a :: Int, b :: String }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and a collection, e.g.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Key = Int\ntype MyMap = Map Key MyData\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What I&amp;#39;d like to do is to track whether an object has been changed or not.&lt;br/&gt;\nSo for example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-- modify an object, somehow signal or track that it has been modified\n-- bonus points for tracking what has been modified\nwithMyData :: (MyData -&amp;gt; MyData) -&amp;gt; Key -&amp;gt; MyMap -&amp;gt; MyMap\nwithMyData = adjust\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What would be a good way to track changes to MyMap?&lt;br/&gt;\nOr more generally, to a data structure?&lt;/p&gt;\n\n&lt;p&gt;I had two ideas of how to do that:  &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;add a dirty flag to MyData: &lt;code&gt;data MyData = MyData { dirty :: Bool, ..&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;use a dirty flag in my collection: &lt;code&gt;Map Key (Bool, MyData)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;keep a copy of the data structure before/after and compare..\n(I guess that would be extremely bad for performance)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The background is that I have a model (think mvc) in a program and when I update\nthe view I want to avoid unnecessary updates for objects which weren&amp;#39;t modified.&lt;/p&gt;\n\n&lt;p&gt;Side-note: In e.g. C++ I would solve this by using flags or a bitmask for my\nprivate object members and provide setters/getters. The setter would then set the\nmodification flags.&lt;/p&gt;\n\n&lt;p&gt;Is there an idiomatic or functional way to do this in Haskell?&lt;br/&gt;\nThanks!&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;Edit: fixed list&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hello,\n\nlet's say I have a data structure like this:\n\n    data MyData = MyData { a :: Int, b :: String }\n\nand a collection, e.g.\n\n    type Key = Int\n    type MyMap = Map Key MyData\n\nWhat I'd like to do is to track whether an object has been changed or not.  \nSo for example:\n\n    -- modify an object, somehow signal or track that it has been modified\n    -- bonus points for tracking what has been modified\n    withMyData :: (MyData -&gt; MyData) -&gt; Key -&gt; MyMap -&gt; MyMap\n    withMyData = adjust\n\nWhat would be a good way to track changes to MyMap?  \nOr more generally, to a data structure?\n\nI had two ideas of how to do that:  \n\n  * add a dirty flag to MyData: `data MyData = MyData { dirty :: Bool, .. `\n  * use a dirty flag in my collection: `Map Key (Bool, MyData)`\n  * keep a copy of the data structure before/after and compare..\n    (I guess that would be extremely bad for performance)\n\nThe background is that I have a model (think mvc) in a program and when I update\nthe view I want to avoid unnecessary updates for objects which weren't modified.\n\nSide-note: In e.g. C++ I would solve this by using flags or a bitmask for my\nprivate object members and provide setters/getters. The setter would then set the\nmodification flags.\n\nIs there an idiomatic or functional way to do this in Haskell?  \nThanks!\n\n^(Edit: fixed list)", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29drkl", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "jrk-", "media": null, "score": 8, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1404036064.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29drkl/tracking_object_modification/", "name": "t3_29drkl", "created": 1404061448.0, "url": "http://www.reddit.com/r/haskell/comments/29drkl/tracking_object_modification/", "author_flair_text": null, "title": "Tracking object modification", "created_utc": 1404032648.0, "ups": 8, "num_comments": 20, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "lpaste.net", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29drft", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "psygnisfive", "media": null, "score": 4, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29drft/seeking_feedback_pattern_matching_for_structural/", "name": "t3_29drft", "created": 1404061285.0, "url": "http://lpaste.net/106459", "author_flair_text": null, "title": "Seeking feedback: pattern matching for structural subtyping on heterogeneous records and lists", "created_utc": 1404032485.0, "ups": 4, "num_comments": 6, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been doing research on calling Haskell from python and I&amp;#39;m not sure whats the best route to take. I&amp;#39;d prefer the simplest route as I&amp;#39;m not concerned about the overhead. Most of my function&amp;#39;s will be fairly simple and have the type signature, foo :: Double -&amp;gt; Double -&amp;gt; [Double]&lt;/p&gt;\n\n&lt;p&gt;I found the following options:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/sakana/HaPy\"&gt;https://github.com/sakana/HaPy&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/nh2/haskell-from-python\"&gt;https://github.com/nh2/haskell-from-python&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://thrift.apache.org/\"&gt;http://thrift.apache.org/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;HaPy looks to be the most promising, but from the open issue it looks like it has some problem&amp;#39;s with Linux aside from that it looks great.&lt;/p&gt;\n\n&lt;p&gt;I couldn&amp;#39;t get the haskell-from-python from python example to work on my mac, however the example looks simple enough to work from linux.&lt;/p&gt;\n\n&lt;p&gt;Trift looks to be overkill.&lt;/p&gt;\n\n&lt;p&gt;There is also writing my own Haskell -&amp;gt; C -&amp;gt; python bindings and aside from that doe&amp;#39;s any one here have any experience with these or advice to offer? Perhaps other suggestions? &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I've been doing research on calling Haskell from python and I'm not sure whats the best route to take. I'd prefer the simplest route as I'm not concerned about the overhead. Most of my function's will be fairly simple and have the type signature, foo :: Double -&gt; Double -&gt; [Double]\n\nI found the following options:\n\nhttps://github.com/sakana/HaPy\n\nhttps://github.com/nh2/haskell-from-python\n\nhttp://thrift.apache.org/\n\n\nHaPy looks to be the most promising, but from the open issue it looks like it has some problem's with Linux aside from that it looks great.\n\nI couldn't get the haskell-from-python from python example to work on my mac, however the example looks simple enough to work from linux.\n\nTrift looks to be overkill.\n\nThere is also writing my own Haskell -&gt; C -&gt; python bindings and aside from that doe's any one here have any experience with these or advice to offer? Perhaps other suggestions? ", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29corb", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "vito-boss", "media": null, "score": 22, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29corb/recommended_way_of_calling_haskell_from_python/", "name": "t3_29corb", "created": 1404023705.0, "url": "http://www.reddit.com/r/haskell/comments/29corb/recommended_way_of_calling_haskell_from_python/", "author_flair_text": null, "title": "Recommended way of calling Haskell from Python", "created_utc": 1403994905.0, "ups": 22, "num_comments": 20, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m a Haskell newbie trying to code something that plans laying out of coordinates in 3d space. A given objects position will depend on nearby objects and connections and other such details. It seems to me that I will need to repeatedly update x,y,z values of many objects.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve read about MVars and TVars and I&amp;#39;m wondering if anybody could give me any general advice on which approach (or any other approach) might be the best to try out.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm a Haskell newbie trying to code something that plans laying out of coordinates in 3d space. A given objects position will depend on nearby objects and connections and other such details. It seems to me that I will need to repeatedly update x,y,z values of many objects.\n\nI've read about MVars and TVars and I'm wondering if anybody could give me any general advice on which approach (or any other approach) might be the best to try out.", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29dm99", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "kanzenryu", "media": null, "score": 2, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29dm99/which_type_of_ref_should_i_use_for_this_kind_of/", "name": "t3_29dm99", "created": 1404053540.0, "url": "http://www.reddit.com/r/haskell/comments/29dm99/which_type_of_ref_should_i_use_for_this_kind_of/", "author_flair_text": null, "title": "Which type of Ref should I use for this kind of processing?", "created_utc": 1404024740.0, "ups": 2, "num_comments": 8, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,&lt;/p&gt;\n\n&lt;p&gt;I\u2019m writting an 3D realtime engine in Haskell, and I\u2019m facing some choices. I represent the &lt;em&gt;core&lt;/em&gt; logic of the engine through types and pure computations. I don\u2019t want to introduce no buffer or that kind of technology-oriented concepts. The idea is to keep minimalistic types and functions in order to \u201cplug\u201d interpreters onto them later (like a &lt;em&gt;renderer&lt;/em&gt;, a &lt;em&gt;serializer&lt;/em&gt;, and so on).&lt;/p&gt;\n\n&lt;p&gt;My first issue is:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;How should I proceed to connect objects between each other, like several *&lt;/em&gt;Mesh&lt;strong&gt;es could have a **Material&lt;/strong&gt;, even the same, and if the &lt;strong&gt;Material&lt;/strong&gt; updates, all the &lt;strong&gt;Mesh&lt;/strong&gt;es has to see the updated version.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I finally came up with a simple solution: each &lt;em&gt;entity-semantic&lt;/em&gt; object is handled via an &lt;code&gt;ID&lt;/code&gt;, which is basically:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;newtype ID a = ID Int deriving (Eq,Ord,Show)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Yes, a phantom type in order to know what we\u2019re representing. Then, I have a typeclass &lt;code&gt;Identify&lt;/code&gt; that is a bit like &lt;code&gt;MonadState&lt;/code&gt;, but for &lt;code&gt;ID&lt;/code&gt;s:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class (Monad m) =&amp;gt; Identify a m where\n  ident :: a -&amp;gt; m (ID a)\n  reify :: ID a -&amp;gt; m a\n  imod :: ID a -&amp;gt; (a -&amp;gt; a) -&amp;gt; m ()\n\ntype AnyIdentify m = forall a. (Identify a m)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If a monad implements, for instance, &lt;code&gt;Identify Mesh&lt;/code&gt;, then we can get &lt;code&gt;ID&lt;/code&gt;s to &lt;code&gt;Mesh&lt;/code&gt;, get back meshes and modify meshes via &lt;code&gt;ID&lt;/code&gt;s.&lt;/p&gt;\n\n&lt;p&gt;Now, the final step: a scene is represented by a huge state (&lt;code&gt;SceneState&lt;/code&gt;). I provide a default monad to describe a scene with a transformer, like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;newtype SceneT m a = SceneT (StateT SceneState m a) deriving (Functor,Applicative,Monad)\n\ninstance (Monad m) =&amp;gt; Identify Mesh (SceneT m) where\n  -- \u2026\n\ninstance (Monad m) =&amp;gt; Identify Material (SceneT m) where\n  -- \u2026 and so on and so forth\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then, if I want to render the whole thing, I\u2019d extract the &lt;code&gt;SceneState&lt;/code&gt; from the &lt;code&gt;SceneT&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;What do you think? How would you handle that?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi,\n\nI\u2019m writting an 3D realtime engine in Haskell, and I\u2019m facing some choices. I represent the *core* logic of the engine through types and pure computations. I don\u2019t want to introduce no buffer or that kind of technology-oriented concepts. The idea is to keep minimalistic types and functions in order to \u201cplug\u201d interpreters onto them later (like a *renderer*, a *serializer*, and so on).\n\nMy first issue is:\n\n&gt; *How should I proceed to connect objects between each other, like several **Mesh**es could have a **Material**, even the same, and if the **Material** updates, all the **Mesh**es has to see the updated version.\n\nI finally came up with a simple solution: each *entity-semantic* object is handled via an `ID`, which is basically:\n\n    newtype ID a = ID Int deriving (Eq,Ord,Show)\n\nYes, a phantom type in order to know what we\u2019re representing. Then, I have a typeclass `Identify` that is a bit like `MonadState`, but for `ID`s:\n\n    class (Monad m) =&gt; Identify a m where\n      ident :: a -&gt; m (ID a)\n      reify :: ID a -&gt; m a\n      imod :: ID a -&gt; (a -&gt; a) -&gt; m ()\n\n    type AnyIdentify m = forall a. (Identify a m)\n\nIf a monad implements, for instance, `Identify Mesh`, then we can get `ID`s to `Mesh`, get back meshes and modify meshes via `ID`s.\n\nNow, the final step: a scene is represented by a huge state (`SceneState`). I provide a default monad to describe a scene with a transformer, like:\n\n    newtype SceneT m a = SceneT (StateT SceneState m a) deriving (Functor,Applicative,Monad)\n\n    instance (Monad m) =&gt; Identify Mesh (SceneT m) where\n      -- \u2026\n\n    instance (Monad m) =&gt; Identify Material (SceneT m) where\n      -- \u2026 and so on and so forth\n\nThen, if I want to render the whole thing, I\u2019d extract the `SceneState` from the `SceneT`.\n\nWhat do you think? How would you handle that?", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29c9dt", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "_skp", "media": null, "score": 11, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1403995210.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29c9dt/interpreters_how_should_it_be_done/", "name": "t3_29c9dt", "created": 1404012302.0, "url": "http://www.reddit.com/r/haskell/comments/29c9dt/interpreters_how_should_it_be_done/", "author_flair_text": null, "title": "Interpreters: how should it be done?", "created_utc": 1403983502.0, "ups": 11, "num_comments": 12, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29b2jj", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "RedLambda", "media": null, "score": 61, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/2L2qtHAUIf9ui0Vp.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29b2jj/ghc_710_gains_xbinaryliterals_language_syntax/", "name": "t3_29b2jj", "created": 1403968851.0, "url": "https://github.com/ghc/ghc/commit/1c0b5fdc9f2b6ea8166cc565383d4cd20432343c", "author_flair_text": null, "title": "GHC 7.10 gains -XBinaryLiterals language syntax extensions", "created_utc": 1403940051.0, "ups": 61, "num_comments": 14, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "twdkz.wordpress.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29abyz", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "dbpatterson", "media": null, "score": 59, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/sZKHEx_RgwOcWIJT.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29abyz/teenage_haskell/", "name": "t3_29abyz", "created": 1403944789.0, "url": "http://twdkz.wordpress.com/2014/06/26/teenage-haskell/", "author_flair_text": null, "title": "Teenage Haskell", "created_utc": 1403915989.0, "ups": 59, "num_comments": 7, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The last Haskell Platform was April last year.  I&amp;#39;ve found that the packages included are frankly getting too old to use.  I found a thread from last October &amp;quot;Wither Haskell Platform 2013.4.0.0&amp;quot;, but nothing to follow up indicating when a new release is coming.&lt;/p&gt;\n\n&lt;p&gt;Does anyone know if there are going to be new releases of the platform?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "The last Haskell Platform was April last year.  I've found that the packages included are frankly getting too old to use.  I found a thread from last October \"Wither Haskell Platform 2013.4.0.0\", but nothing to follow up indicating when a new release is coming.\n\nDoes anyone know if there are going to be new releases of the platform?", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29ajdp", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "lally", "media": null, "score": 36, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/29ajdp/is_haskell_platform_dead/", "name": "t3_29ajdp", "created": 1403950797.0, "url": "http://www.reddit.com/r/haskell/comments/29ajdp/is_haskell_platform_dead/", "author_flair_text": null, "title": "Is Haskell Platform Dead?", "created_utc": 1403921997.0, "ups": 36, "num_comments": 26, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "nikita-volkov.github.io", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29a2vy", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "nikita-volkov", "media": null, "score": 30, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/aKEgZnOn7QrD7mvt.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29a2vy/a_post_on_motivation_behind_stmcontainers_and/", "name": "t3_29a2vy", "created": 1403938109.0, "url": "http://nikita-volkov.github.io/stm-containers/", "author_flair_text": null, "title": "A post on motivation behind \"stm-containers\" and analysis of performance", "created_utc": 1403909309.0, "ups": 30, "num_comments": 12, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "298ztm", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "openaki", "media": null, "score": 31, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/8dPIh-oDSa6CcJEt.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/298ztm/announce_bloomberg_api_bindings_for_haskell/", "name": "t3_298ztm", "created": 1403913818.0, "url": "https://github.com/bloomberg/blpapi-hs", "author_flair_text": null, "title": "Announce: Bloomberg API bindings for Haskell (blpapi-hs)", "created_utc": 1403885018.0, "ups": 31, "num_comments": 2, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not very fluent in Haskell, but from the little I know about type classes I was expecting the comparison in the title, i.e. &lt;code&gt;1 &amp;lt; 2.0&lt;/code&gt;, to fail without and explicit cast like &lt;code&gt;fromIntegral&lt;/code&gt;. Why (and how) does it work? I am aware that both &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2.0&lt;/code&gt; have instances for &lt;code&gt;Num&lt;/code&gt;, but is that enough? If so, how would such a comparison be handled by the runtime?&lt;/p&gt;\n\n&lt;p&gt;Thanks,&lt;/p&gt;\n\n&lt;p&gt;Alex&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi,\n\nI'm not very fluent in Haskell, but from the little I know about type classes I was expecting the comparison in the title, i.e. `1 &lt; 2.0`, to fail without and explicit cast like `fromIntegral`. Why (and how) does it work? I am aware that both `1` and `2.0` have instances for `Num`, but is that enough? If so, how would such a comparison be handled by the runtime?\n\n\nThanks,\n\nAlex", "likes": null, "secure_media": null, "link_flair_text": null, "id": "299ua7", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "alex_muscar", "media": null, "score": 8, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/299ua7/why_does_this_work_1_20/", "name": "t3_299ua7", "created": 1403932340.0, "url": "http://www.reddit.com/r/haskell/comments/299ua7/why_does_this_work_1_20/", "author_flair_text": null, "title": "Why does this work: 1 &lt; 2.0?", "created_utc": 1403903540.0, "ups": 8, "num_comments": 18, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "martingalemeasure.wordpress.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "298mgy", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "martingalemeasure", "media": null, "score": 14, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/gUvv-eb-E87Zz3xb.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/298mgy/hs_to_lhs/", "name": "t3_298mgy", "created": 1403904731.0, "url": "http://martingalemeasure.wordpress.com/2014/06/26/convert-hs-to-lhs-3/", "author_flair_text": null, "title": ".hs to .lhs", "created_utc": 1403875931.0, "ups": 14, "num_comments": 6, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "scrambledeggsontoast.github.io", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "299j74", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "tekn04", "media": null, "score": 2, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/299j74/kachushi_an_artificial_intelligence_for_the_game/", "name": "t3_299j74", "created": 1403925522.0, "url": "http://scrambledeggsontoast.github.io/2014/06/26/artificial-intelligence-ofcp/", "author_flair_text": null, "title": "Kachushi, an artificial intelligence for the game of Open Face Chinese Poker", "created_utc": 1403896722.0, "ups": 2, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "haskelldata.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "296l80", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "CarbonFire", "media": null, "score": 102, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/N1DKgs7f05bvu_pO.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/296l80/today_i_published_an_introductory_book_on_haskell/", "name": "t3_296l80", "created": 1403844569.0, "url": "http://haskelldata.com", "author_flair_text": null, "title": "Today I published an introductory book on Haskell Data Analysis", "created_utc": 1403815769.0, "ups": 102, "num_comments": 27, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;data Turtles = Turtle Turtles\n               deriving ( Show )\n\nturtles :: Turtles\nturtles = Turtle turtles\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "    data Turtles = Turtle Turtles\n                   deriving ( Show )\n    \n    turtles :: Turtles\n    turtles = Turtle turtles", "likes": null, "secure_media": null, "link_flair_text": null, "id": "297k2k", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "kwef", "media": null, "score": 13, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/297k2k/a_joke_in_the_form_of_types/", "name": "t3_297k2k", "created": 1403866272.0, "url": "http://www.reddit.com/r/haskell/comments/297k2k/a_joke_in_the_form_of_types/", "author_flair_text": null, "title": "A joke in the form of types", "created_utc": 1403837472.0, "ups": 13, "num_comments": 18, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "hackage.haskell.org", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "295lbr", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "nikita-volkov", "media": null, "score": 37, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/295lbr/announce_stmcontainers_a_hash_map_and_hash_set/", "name": "t3_295lbr", "created": 1403824450.0, "url": "http://hackage.haskell.org/package/stm-containers", "author_flair_text": null, "title": "ANNOUNCE: STM-Containers. A hash map and hash set for STM", "created_utc": 1403795650.0, "ups": 37, "num_comments": 13, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "blog.jle.im", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "296gju", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "mstksg", "media": null, "score": 11, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/Qm4FmBrp6O2dDVkx.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/296gju/streaming_huffman_encoding_part_3_streaming_w/", "name": "t3_296gju", "created": 1403841979.0, "url": "http://blog.jle.im/entry/pipes-streaming-huffman-compression-in-haskell-part-3", "author_flair_text": null, "title": "Streaming Huffman Encoding Part 3: Streaming w/ Pipes (Beginner/Intermediate Haskell projects series)", "created_utc": 1403813179.0, "ups": 11, "num_comments": 3, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "arxiv.org", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "29639f", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "Mob_Of_One", "media": null, "score": 13, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/29639f/a_fast_minimal_memory_consistent_hash_algorithm/", "name": "t3_29639f", "created": 1403834928.0, "url": "http://arxiv.org/pdf/1406.2294v1.pdf", "author_flair_text": null, "title": "A Fast, Minimal Memory, Consistent Hash Algorithm", "created_utc": 1403806128.0, "ups": 13, "num_comments": 11, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "youtube.com", "banned_by": null, "media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=http%3A%2F%2Fwww.youtube.com%2Fembed%2FYMYgTPH4z6A%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DYMYgTPH4z6A&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FYMYgTPH4z6A%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "http://www.youtube.com/", "description": "Screencast of a presentation - mic is mis-calibrated so turn your volume up. Sorry! Slides here: https://github.com/bitemyapp/presentations/tree/master/newtype_type_safety", "title": "How to write type-safe Haskell code", "url": "http://www.youtube.com/watch?v=YMYgTPH4z6A", "author_name": "Christopher Allen", "height": 338, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FYMYgTPH4z6A%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DYMYgTPH4z6A&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FYMYgTPH4z6A%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "version": "1.0", "provider_name": "YouTube", "thumbnail_url": "https://i.embed.ly/1/image?url=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FYMYgTPH4z6A%2Fhqdefault.jpg&amp;key=b1e305db91cf4aa5a86b732cc9fffceb", "type": "video", "thumbnail_height": 360, "author_url": "http://www.youtube.com/channel/UCMNqLf5GI6mkAUo-LGS07ig"}}, "link_flair_text": null, "id": "2961ig", "gilded": 0, "secure_media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FYMYgTPH4z6A%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DYMYgTPH4z6A&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FYMYgTPH4z6A%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "clicked": false, "stickied": false, "author": "Mob_Of_One", "media": {"type": "youtube.com", "oembed": {"provider_url": "http://www.youtube.com/", "description": "Screencast of a presentation - mic is mis-calibrated so turn your volume up. Sorry! Slides here: https://github.com/bitemyapp/presentations/tree/master/newtype_type_safety", "title": "How to write type-safe Haskell code", "url": "http://www.youtube.com/watch?v=YMYgTPH4z6A", "author_name": "Christopher Allen", "height": 338, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=http%3A%2F%2Fwww.youtube.com%2Fembed%2FYMYgTPH4z6A%3Ffeature%3Doembed&amp;url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DYMYgTPH4z6A&amp;image=http%3A%2F%2Fi1.ytimg.com%2Fvi%2FYMYgTPH4z6A%2Fhqdefault.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "version": "1.0", "provider_name": "YouTube", "thumbnail_url": "http://i1.ytimg.com/vi/YMYgTPH4z6A/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "http://www.youtube.com/channel/UCMNqLf5GI6mkAUo-LGS07ig"}}, "score": 12, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/wSpY5ppTedc3wLcH.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/2961ig/writing_code_that_cant_go_wrong_in_haskell/", "name": "t3_2961ig", "created": 1403833976.0, "url": "https://www.youtube.com/watch?v=YMYgTPH4z6A&amp;feature=youtu.be", "author_flair_text": null, "title": "Writing code that can't go wrong in Haskell - (beginner/intermediate screencast)", "created_utc": 1403805176.0, "ups": 12, "num_comments": 19, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "nikita-volkov.github.io", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "2957x8", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "nikita-volkov", "media": null, "score": 23, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/t29g6iZKcyfpxdkc.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/2957x8/tutorial_profiling_cabal_projects/", "name": "t3_2957x8", "created": 1403815000.0, "url": "http://nikita-volkov.github.io/profiling-cabal-projects/", "author_flair_text": null, "title": "Tutorial: Profiling Cabal projects", "created_utc": 1403786200.0, "ups": 23, "num_comments": 5, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi r/haskell! I&amp;#39;m an intern at &lt;a href=\"http://corp.galois.com\"&gt;Galois, Inc.&lt;/a&gt; this summer, and myself and a few colleagues were recently talking about things we&amp;#39;d like to see in a Cabal wrapper program with extra utilities. In particular, we would love to have the ability to split and merge packages with automatic management of the .cabal files involved, rename modules and adjust imports accordingly, and other things like that.&lt;/p&gt;\n\n&lt;p&gt;But before we go any further building something like this, we wanted to find out more about what other people would want out of a Cabal-augmentation package. What package/dependency/module-management tasks do you find frustrating, and what features would solve those problems for you?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi r/haskell! I'm an intern at [Galois, Inc.](http://corp.galois.com) this summer, and myself and a few colleagues were recently talking about things we'd like to see in a Cabal wrapper program with extra utilities. In particular, we would love to have the ability to split and merge packages with automatic management of the .cabal files involved, rename modules and adjust imports accordingly, and other things like that.\n\nBut before we go any further building something like this, we wanted to find out more about what other people would want out of a Cabal-augmentation package. What package/dependency/module-management tasks do you find frustrating, and what features would solve those problems for you?", "likes": null, "secure_media": null, "link_flair_text": null, "id": "294ihr", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "kwef", "media": null, "score": 18, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/294ihr/what_would_you_want_out_of_a_cabal_enhancement/", "name": "t3_294ihr", "created": 1403786916.0, "url": "http://www.reddit.com/r/haskell/comments/294ihr/what_would_you_want_out_of_a_cabal_enhancement/", "author_flair_text": null, "title": "What would you want out of a Cabal enhancement package?", "created_utc": 1403758116.0, "ups": 18, "num_comments": 43, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "cdsmith.wordpress.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "294h5r", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "cdsmith", "media": null, "score": 14, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/gUvv-eb-E87Zz3xb.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/294h5r/big_changes_coming_to_codeworld/", "name": "t3_294h5r", "created": 1403785818.0, "url": "http://cdsmith.wordpress.com/2014/06/25/big-changes-coming-to-codeworld/", "author_flair_text": null, "title": "Big changes coming to CodeWorld", "created_utc": 1403757018.0, "ups": 14, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been programming in haskell for over a year now, but still have yet to pick up Real World Haskell and read it all the way through. I finally decided that I would make the effort and read it all the way through, but because it came out 6 years ago I&amp;#39;m wondering if some parts of it might now be outdated and obsolete.&lt;/p&gt;\n\n&lt;p&gt;In the interest of not picking up bad practices, I come to you: are there any sections of Real World Haskell that may have outdated-enough content to warrant me not applying them to real projects?&lt;/p&gt;\n\n&lt;p&gt;Thank you!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I've been programming in haskell for over a year now, but still have yet to pick up Real World Haskell and read it all the way through. I finally decided that I would make the effort and read it all the way through, but because it came out 6 years ago I'm wondering if some parts of it might now be outdated and obsolete.\n\nIn the interest of not picking up bad practices, I come to you: are there any sections of Real World Haskell that may have outdated-enough content to warrant me not applying them to real projects?\n\nThank you!", "likes": null, "secure_media": null, "link_flair_text": null, "id": "2938yb", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "crockeo", "media": null, "score": 51, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/2938yb/real_world_haskell_outdated_parts/", "name": "t3_2938yb", "created": 1403757420.0, "url": "http://www.reddit.com/r/haskell/comments/2938yb/real_world_haskell_outdated_parts/", "author_flair_text": null, "title": "Real World Haskell - Outdated Parts?", "created_utc": 1403728620.0, "ups": 51, "num_comments": 12, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "vimeo.com", "banned_by": null, "media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=http%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F99124387&amp;src_secure=1&amp;url=http%3A%2F%2Fvimeo.com%2F99124387&amp;image=http%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F480272116_640.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=vimeo\" width=\"600\" height=\"336\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 336}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": {"type": "vimeo.com", "oembed": {"provider_url": "https://vimeo.com/", "description": "'Write Yourself a Scheme' in 48 hours by Sean Chalmers http://www.meetup.com/Brisbane-Functional-Programming-Group/events/167951422/ A dive into the experience of creating a Lisp implementation in Haskell. Taken from the book of the same name, this presentation will provide some insight into what is needed to get started, how to avoid some pain along the way, and why undertaking this project is a good idea for anyone looking to hone their Haskell skills.", "title": "Sean Chalmers - Write Yourself a Scheme - BFPG - 2014-06-24 - Talk2", "thumbnail_width": 640, "height": 336, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F99124387&amp;url=http%3A%2F%2Fvimeo.com%2F99124387&amp;image=http%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F480272116_640.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=vimeo\" width=\"600\" height=\"336\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Rob Manthey", "version": "1.0", "provider_name": "Vimeo", "thumbnail_url": "https://i.embed.ly/1/image?url=http%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F480272116_640.jpg&amp;key=b1e305db91cf4aa5a86b732cc9fffceb", "type": "video", "thumbnail_height": 358, "author_url": "http://vimeo.com/robmanthey"}}, "link_flair_text": null, "id": "293wx0", "gilded": 0, "secure_media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F99124387&amp;url=http%3A%2F%2Fvimeo.com%2F99124387&amp;image=http%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F480272116_640.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=vimeo\" width=\"600\" height=\"336\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 336}, "clicked": false, "stickied": false, "author": "Mob_Of_One", "media": {"type": "vimeo.com", "oembed": {"provider_url": "https://vimeo.com/", "description": "'Write Yourself a Scheme' in 48 hours by Sean Chalmers http://www.meetup.com/Brisbane-Functional-Programming-Group/events/167951422/ A dive into the experience of creating a Lisp implementation in Haskell. Taken from the book of the same name, this presentation will provide some insight into what is needed to get started, how to avoid some pain along the way, and why undertaking this project is a good idea for anyone looking to hone their Haskell skills.", "title": "Sean Chalmers - Write Yourself a Scheme - BFPG - 2014-06-24 - Talk2", "thumbnail_width": 640, "height": 336, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=http%3A%2F%2Fplayer.vimeo.com%2Fvideo%2F99124387&amp;src_secure=1&amp;url=http%3A%2F%2Fvimeo.com%2F99124387&amp;image=http%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F480272116_640.jpg&amp;key=2aa3c4d5f3de4f5b9120b660ad850dc9&amp;type=text%2Fhtml&amp;schema=vimeo\" width=\"600\" height=\"336\" scrolling=\"no\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Rob Manthey", "version": "1.0", "provider_name": "Vimeo", "thumbnail_url": "http://i.vimeocdn.com/video/480272116_640.jpg", "type": "video", "thumbnail_height": 358, "author_url": "http://vimeo.com/robmanthey"}}, "score": 11, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/IgyVTIl-idbmFRc-.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/293wx0/sean_chalmers_write_yourself_a_scheme_bfpg/", "name": "t3_293wx0", "created": 1403771913.0, "url": "https://vimeo.com/99124387", "author_flair_text": null, "title": "Sean Chalmers - Write Yourself a Scheme - BFPG - 2014-06-24", "created_utc": 1403743113.0, "ups": 11, "num_comments": 4, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "hackage.haskell.org", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "291wel", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "quchen", "media": null, "score": 56, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/291wel/formatting_typesafe_printflike_library_by/", "name": "t3_291wel", "created": 1403728715.0, "url": "http://hackage.haskell.org/package/formatting", "author_flair_text": null, "title": "Formatting: type-safe printf-like library by chrisdone", "created_utc": 1403699915.0, "ups": 56, "num_comments": 25, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "meetup.com", "banned_by": null, "media_embed": {"content": "&lt;style type=\"text/css\"&gt;\n#meetup_oembed .mu_clearfix:after { visibility: hidden; display: block; font-size: 0; content: \" \"; clear: both; height: 0; }\n* html #meetup_oembed .mu_clearfix, *:first-child+html #meetup_oembed .mu_clearfix { zoom: 1; }\n#meetup_oembed { background:#eee;border:1px solid #ccc;padding:10px;-moz-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;margin:0; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 12px; }\n#meetup_oembed h3 { font-weight:normal; margin:0 0 10px; padding:0; line-height:26px; font-family:Georgia,Palatino,serif; font-size:24px }\n#meetup_oembed p { margin: 0 0 10px; padding:0; line-height:16px; }\n#meetup_oembed img { border:none; margin:0; padding:0; }\n#meetup_oembed a, #meetup_oembed a:visited, #meetup_oembed a:link { color: #1B76B3; text-decoration: none; cursor: hand; cursor: pointer; }\n#meetup_oembed a:hover { color: #1B76B3; text-decoration: underline; }\n#meetup_oembed a.mu_button { font-size:14px; -moz-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;border:2px solid #A7241D;color:white!important;text-decoration:none;background-color: #CA3E47; background-image: -moz-linear-gradient(top, #ca3e47, #a8252e); background-image: -webkit-gradient(linear, left bottom, left top, color-stop(0, #a8252e), color-stop(1, #ca3e47));disvplay:inline-block;padding:5px 10px; }\n#meetup_oembed a.mu_button:hover { color: #fff!important; text-decoration: none; }\n#meetup_oembed .photo { width:50px; height:50px; overflow:hidden;background:#ccc;float:left;margin:0 5px 0 0;text-align:center;padding:1px; }\n#meetup_oembed .photo img { height:50px }\n#meetup_oembed .number { font-size:18px; }\n#meetup_oembed .thing { text-transform: uppercase; color: #555; }\n&lt;/style&gt;\n&lt;div id=\"meetup_oembed\" style=\"height:366px\"&gt;\n     &lt;div style=\"max-height:326px;overflow:hidden\"&gt;\n          &lt;h3&gt;Hac Boston 2014&lt;/h3&gt;\n          &lt;p style=\"margin:5px 0;font-size:16px\"&gt;Friday, Aug 1, 2014,  7:00 PM&lt;/p&gt;\n          &lt;p style=\"margin: 0 0 5px;\"&gt;&lt;span style=\"font-size:14px\"&gt;MIT Brain and Cognitive Sciences Building&lt;/span&gt;&lt;br /&gt;\n&lt;span style=\"font-size:12px;\"&gt;43 Vassar St &lt;/span&gt;&lt;/p&gt;\n\n          &lt;span style=\"color:#4F8A10;font-size:16px;\"&gt;34 Haskellers Attending&lt;/span&gt; \n          &lt;div style=\"margin:5px 0 10px\" class=\"mu_clearfix\"&gt;\n               &lt;div class=\"photo\"&gt;&lt;img src=\"http://photos2.meetupstatic.com/photos/member/5/7/8/2/thumb_83782402.jpeg\" /&gt;&lt;/div&gt;&lt;div class=\"photo\"&gt;&lt;img src=\"http://photos4.meetupstatic.com/photos/member/a/7/8/c/thumb_72762892.jpeg\" /&gt;&lt;/div&gt;&lt;div class=\"photo\"&gt;&lt;img src=\"http://photos3.meetupstatic.com/photos/member/3/c/3/4/thumb_178515412.jpeg\" /&gt;&lt;/div&gt;&lt;div class=\"photo\"&gt;&lt;img src=\"http://photos3.meetupstatic.com/photos/member/e/6/2/thumb_87123682.jpeg\" /&gt;&lt;/div&gt;&lt;div class=\"photo\"&gt;&lt;img src=\"http://photos4.meetupstatic.com/photos/member/1/8/3/0/thumb_152466192.jpeg\" /&gt;&lt;/div&gt;\n          &lt;/div&gt;\n          &lt;p style=\"line-height:16px\"&gt;Registration\nWe have room for 80+ people. If you plan to be in the area and are thinking about attending, please register.\u00a0Registration is free, and open to everyone; just mark that you'll be attending here on meetup.\n\nDates and Times\n\nWe'll be running Friday, August 1st to Sunday, August 3rd:\n\u2022\u00a0Friday 5PM to 10PM\n\u2022\u00a0Saturday 9AM to 10PM\n\u2022\u00a0Sunday 9A...&lt;/p&gt;\n     &lt;/div&gt;\n     &lt;p style=\"margin:10px 0 0;\"&gt;&lt;a href=\"http://www.meetup.com/Boston-Haskell/events/184294502/\" target=\"_blank\" class=\"mu_button\"&gt;&lt;strong&gt;Check out this Meetup &amp;rarr;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "width": 308, "scrolling": false, "height": 391}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "2932xl", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "gbaz1", "media": {"oembed": {"provider_url": "http://www.meetup.com/", "description": "Registration We have room for 80+ people. If you plan to be in the area and are thinking about attending, please register. Registration is free, and open to everyone; just mark that you&amp;#039;ll be att", "title": "Hac Boston 2014", "type": "rich", "thumbnail_width": 50, "height": 391, "width": 308, "html": "&lt;style type=\"text/css\"&gt;\n#meetup_oembed .mu_clearfix:after { visibility: hidden; display: block; font-size: 0; content: \" \"; clear: both; height: 0; }\n* html #meetup_oembed .mu_clearfix, *:first-child+html #meetup_oembed .mu_clearfix { zoom: 1; }\n#meetup_oembed { background:#eee;border:1px solid #ccc;padding:10px;-moz-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;margin:0; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 12px; }\n#meetup_oembed h3 { font-weight:normal; margin:0 0 10px; padding:0; line-height:26px; font-family:Georgia,Palatino,serif; font-size:24px }\n#meetup_oembed p { margin: 0 0 10px; padding:0; line-height:16px; }\n#meetup_oembed img { border:none; margin:0; padding:0; }\n#meetup_oembed a, #meetup_oembed a:visited, #meetup_oembed a:link { color: #1B76B3; text-decoration: none; cursor: hand; cursor: pointer; }\n#meetup_oembed a:hover { color: #1B76B3; text-decoration: underline; }\n#meetup_oembed a.mu_button { font-size:14px; -moz-border-radius:3px;-webkit-border-radius:3px;border-radius:3px;border:2px solid #A7241D;color:white!important;text-decoration:none;background-color: #CA3E47; background-image: -moz-linear-gradient(top, #ca3e47, #a8252e); background-image: -webkit-gradient(linear, left bottom, left top, color-stop(0, #a8252e), color-stop(1, #ca3e47));disvplay:inline-block;padding:5px 10px; }\n#meetup_oembed a.mu_button:hover { color: #fff!important; text-decoration: none; }\n#meetup_oembed .photo { width:50px; height:50px; overflow:hidden;background:#ccc;float:left;margin:0 5px 0 0;text-align:center;padding:1px; }\n#meetup_oembed .photo img { height:50px }\n#meetup_oembed .number { font-size:18px; }\n#meetup_oembed .thing { text-transform: uppercase; color: #555; }\n&lt;/style&gt;\n&lt;div id=\"meetup_oembed\" style=\"height:366px\"&gt;\n     &lt;div style=\"max-height:326px;overflow:hidden\"&gt;\n          &lt;h3&gt;Hac Boston 2014&lt;/h3&gt;\n          &lt;p style=\"margin:5px 0;font-size:16px\"&gt;Friday, Aug 1, 2014,  7:00 PM&lt;/p&gt;\n          &lt;p style=\"margin: 0 0 5px;\"&gt;&lt;span style=\"font-size:14px\"&gt;MIT Brain and Cognitive Sciences Building&lt;/span&gt;&lt;br /&gt;\n&lt;span style=\"font-size:12px;\"&gt;43 Vassar St &lt;/span&gt;&lt;/p&gt;\n\n          &lt;span style=\"color:#4F8A10;font-size:16px;\"&gt;34 Haskellers Attending&lt;/span&gt; \n          &lt;div style=\"margin:5px 0 10px\" class=\"mu_clearfix\"&gt;\n               &lt;div class=\"photo\"&gt;&lt;img src=\"http://photos2.meetupstatic.com/photos/member/5/7/8/2/thumb_83782402.jpeg\" /&gt;&lt;/div&gt;&lt;div class=\"photo\"&gt;&lt;img src=\"http://photos4.meetupstatic.com/photos/member/a/7/8/c/thumb_72762892.jpeg\" /&gt;&lt;/div&gt;&lt;div class=\"photo\"&gt;&lt;img src=\"http://photos3.meetupstatic.com/photos/member/3/c/3/4/thumb_178515412.jpeg\" /&gt;&lt;/div&gt;&lt;div class=\"photo\"&gt;&lt;img src=\"http://photos3.meetupstatic.com/photos/member/e/6/2/thumb_87123682.jpeg\" /&gt;&lt;/div&gt;&lt;div class=\"photo\"&gt;&lt;img src=\"http://photos4.meetupstatic.com/photos/member/1/8/3/0/thumb_152466192.jpeg\" /&gt;&lt;/div&gt;\n          &lt;/div&gt;\n          &lt;p style=\"line-height:16px\"&gt;Registration\nWe have room for 80+ people. If you plan to be in the area and are thinking about attending, please register.\u00a0Registration is free, and open to everyone; just mark that you'll be attending here on meetup.\n\nDates and Times\n\nWe'll be running Friday, August 1st to Sunday, August 3rd:\n\u2022\u00a0Friday 5PM to 10PM\n\u2022\u00a0Saturday 9AM to 10PM\n\u2022\u00a0Sunday 9A...&lt;/p&gt;\n     &lt;/div&gt;\n     &lt;p style=\"margin:10px 0 0;\"&gt;&lt;a href=\"http://www.meetup.com/Boston-Haskell/events/184294502/\" target=\"_blank\" class=\"mu_button\"&gt;&lt;strong&gt;Check out this Meetup &amp;rarr;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "version": "1.0", "provider_name": "Meetup", "thumbnail_url": "http://photos2.meetupstatic.com/photos/member/5/7/8/2/thumb_83782402.jpeg", "thumbnail_height": 55}, "type": "meetup.com"}, "score": 11, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/lNx05xdlbN60PerT.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/2932xl/boston_hackathon_is_coming_august_13/", "name": "t3_2932xl", "created": 1403754116.0, "url": "http://www.meetup.com/Boston-Haskell/events/184294502/", "author_flair_text": null, "title": "Boston Hackathon is Coming! August 1-3!", "created_utc": 1403725316.0, "ups": 11, "num_comments": 4, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;We&amp;#39;re looking for talented hackers who are interested in security research. The projects involve exploitation, defense, and malware analysis. We are seeking someone with a strong background in reversing and writing exploits against program binaries. Compiler knowledge a big plus. We write our code in OCaml and C, but experience with any functional programming language such as Haskell, SML, Clojure is welcomed. This position focuses on improving our current infrastructure for automatic exploit generation and will help with the development of a fully automated system that plays in computer security tournaments such as \u201cCapture the Flag\u201d. The system will compete in real-time to find vulnerabilities, exploit adversaries, and generate and deploy security patches. Responsibilities include program analysis for x86 code in an OCaml infrastructure and development of new features through data-driven iterations.&lt;/p&gt;\n\n&lt;p&gt;The position is at Carnegie Mellon University in CyLab with &lt;strong&gt;Prof. David Brumley&lt;/strong&gt;. You&amp;#39;d also be working with PhD students and undergrads. For more information on these security projects, visit &lt;a href=\"http://security.ece.cmu.edu\"&gt;http://security.ece.cmu.edu&lt;/a&gt;. \nIf interested, please &lt;a href=\"https://cmu.taleo.net/careersection/2/jobdetail.ftl?job=100747\"&gt;click here&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This full time staff position at Carnegie Mellon University comes with excellent benefits such as free tuition benefits, numerous medical &amp;amp; dental plans, free public transportation, 8% contribution to a retirement account, generous paid time off (PTO), and a great work environment. You can get more information &lt;a href=\"http://www.cmu.edu/hr/benefits/benefit_programs/index.html\"&gt;here&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Carnegie Mellon University is an EEO/Affirmative Action Employer \u2013 M/F/Disability/Veteran&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "We're looking for talented hackers who are interested in security research. The projects involve exploitation, defense, and malware analysis. We are seeking someone with a strong background in reversing and writing exploits against program binaries. Compiler knowledge a big plus. We write our code in OCaml and C, but experience with any functional programming language such as Haskell, SML, Clojure is welcomed. This position focuses on improving our current infrastructure for automatic exploit generation and will help with the development of a fully automated system that plays in computer security tournaments such as \u201cCapture the Flag\u201d. The system will compete in real-time to find vulnerabilities, exploit adversaries, and generate and deploy security patches. Responsibilities include program analysis for x86 code in an OCaml infrastructure and development of new features through data-driven iterations.\n\nThe position is at Carnegie Mellon University in CyLab with **Prof. David Brumley**. You'd also be working with PhD students and undergrads. For more information on these security projects, visit http://security.ece.cmu.edu. \nIf interested, please [click here](https://cmu.taleo.net/careersection/2/jobdetail.ftl?job=100747)\n\nThis full time staff position at Carnegie Mellon University comes with excellent benefits such as free tuition benefits, numerous medical &amp; dental plans, free public transportation, 8% contribution to a retirement account, generous paid time off (PTO), and a great work environment. You can get more information [here](http://www.cmu.edu/hr/benefits/benefit_programs/index.html)\n \nCarnegie Mellon University is an EEO/Affirmative Action Employer \u2013 M/F/Disability/Veteran", "likes": null, "secure_media": null, "link_flair_text": null, "id": "292z37", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "cmu-recruiting", "media": null, "score": 12, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/292z37/exciting_new_opportunity_at_cylabcarnegie_mellon/", "name": "t3_292z37", "created": 1403752069.0, "url": "http://www.reddit.com/r/haskell/comments/292z37/exciting_new_opportunity_at_cylabcarnegie_mellon/", "author_flair_text": null, "title": "Exciting new opportunity at CyLab/Carnegie Mellon University!", "created_utc": 1403723269.0, "ups": 12, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying to figure out what can be said mathematically about the time and space complexity of lazy programs. Here&amp;#39;s what I know so far:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;If we look at whole programs, then the time complexity of lazy evaluation is asymptotically at least as good as eager evaluation, but space complexity might be worse.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If we look at individual functions in a lazy language, things are less clear. Some functions, like quicksort, seem to have a well-defined time and space complexity, which is roughly &amp;quot;how much time and space this function would use if both the arguments and the result were fully evaluated&amp;quot;, assuming that both are finite. But that definition is not enough to analyze some uses of these functions, like implementing quickselect in terms of quicksort. And it doesn&amp;#39;t seem to work for functions that are intended to deal with infinite data structures, like repeat. Time is just as problematic as space in this regard.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Okasaki&amp;#39;s book has a nice approach to analyzing some lazy data structures, though it doesn&amp;#39;t seem to generalize to everything you can write in a lazy language.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The question is, where should I look next? How do people analyze the time and space complexity of functions in a lazy language, both in theory and in practice?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I'm trying to figure out what can be said mathematically about the time and space complexity of lazy programs. Here's what I know so far:\n\n- If we look at whole programs, then the time complexity of lazy evaluation is asymptotically at least as good as eager evaluation, but space complexity might be worse.\n\n- If we look at individual functions in a lazy language, things are less clear. Some functions, like quicksort, seem to have a well-defined time and space complexity, which is roughly \"how much time and space this function would use if both the arguments and the result were fully evaluated\", assuming that both are finite. But that definition is not enough to analyze some uses of these functions, like implementing quickselect in terms of quicksort. And it doesn't seem to work for functions that are intended to deal with infinite data structures, like repeat. Time is just as problematic as space in this regard.\n\n- Okasaki's book has a nice approach to analyzing some lazy data structures, though it doesn't seem to generalize to everything you can write in a lazy language.\n\nThe question is, where should I look next? How do people analyze the time and space complexity of functions in a lazy language, both in theory and in practice?", "likes": null, "secure_media": null, "link_flair_text": null, "id": "292rvv", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "want_to_want", "media": null, "score": 12, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1403728840.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/292rvv/learn_reasoning_about_time_and_space_complexity/", "name": "t3_292rvv", "created": 1403748197.0, "url": "http://www.reddit.com/r/haskell/comments/292rvv/learn_reasoning_about_time_and_space_complexity/", "author_flair_text": null, "title": "[learn] Reasoning about time and space complexity", "created_utc": 1403719397.0, "ups": 12, "num_comments": 9, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "codeutopia.net", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "2920e0", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "Wolfspaw", "media": null, "score": 26, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/2920e0/using_haskell_on_a_bot_competition_hello_world/", "name": "t3_2920e0", "created": 1403731934.0, "url": "http://codeutopia.net/blog/2014/06/19/hello-world-open-2014-thoughts/", "author_flair_text": null, "title": "Using haskell on a bot competition (Hello World Open)", "created_utc": 1403703134.0, "ups": 26, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;A while back I had a job interview where I had to write a function that would test if a string was a palindrome. I was able to pick whichever language I wanted (from a list).&lt;/p&gt;\n\n&lt;p&gt;I started thinking about how it would be easy to express this algorithm in haskell, so this morning I decided to try it out.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve been learning about haskell off and on for about a year, but haven&amp;#39;t really implemented anything too significant, so I wanted to get some input on this, if anyone is interested in taking a look.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;palindrome :: Eq a =&amp;gt; [a] -&amp;gt; Bool\npalindrome [] = True\npalindrome (x:[]) = True\npalindrome (x:_:y:[]) = x == y\npalindrome xs | head xs /= last xs = False\n              | head xs == last xs = palindrome $ stripFirstAndLast xs  \n                where stripFirstAndLast ys = tail $ reverse $ tail $ reverse ys\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want syntax highlighting: &lt;a href=\"https://gist.github.com/z3roshot/b0fba486ecaec9917d04\"&gt;https://gist.github.com/z3roshot/b0fba486ecaec9917d04&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "A while back I had a job interview where I had to write a function that would test if a string was a palindrome. I was able to pick whichever language I wanted (from a list).\n\nI started thinking about how it would be easy to express this algorithm in haskell, so this morning I decided to try it out.\n\nI've been learning about haskell off and on for about a year, but haven't really implemented anything too significant, so I wanted to get some input on this, if anyone is interested in taking a look.\n\n    palindrome :: Eq a =&gt; [a] -&gt; Bool\n    palindrome [] = True\n    palindrome (x:[]) = True\n    palindrome (x:_:y:[]) = x == y\n    palindrome xs | head xs /= last xs = False\n                  | head xs == last xs = palindrome $ stripFirstAndLast xs  \n                    where stripFirstAndLast ys = tail $ reverse $ tail $ reverse ys\n\nIf you want syntax highlighting: https://gist.github.com/z3roshot/b0fba486ecaec9917d04", "likes": null, "secure_media": null, "link_flair_text": null, "id": "292g4z", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "zexperiment", "media": null, "score": 2, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/292g4z/algorithm_critique_requested/", "name": "t3_292g4z", "created": 1403741772.0, "url": "http://www.reddit.com/r/haskell/comments/292g4z/algorithm_critique_requested/", "author_flair_text": null, "title": "Algorithm critique requested", "created_utc": 1403712972.0, "ups": 2, "num_comments": 7, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "ben.kirw.in", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28zwoc", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "bkirwi", "media": null, "score": 58, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28zwoc/barely_functional_writing_a_real_program_in/", "name": "t3_28zwoc", "created": 1403670591.0, "url": "http://ben.kirw.in/2014/06/24/barely-functional-1-rlp/", "author_flair_text": null, "title": "Barely Functional: Writing a Real Program in Haskell", "created_utc": 1403641791.0, "ups": 58, "num_comments": 36, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "martingalemeasure.wordpress.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "290ozb", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "martingalemeasure", "media": null, "score": 19, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/B-fGTxzM08c8U9lZ.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/290ozb/solving_the_15puzzle_with_haskell_and_diagrams/", "name": "t3_290ozb", "created": 1403688492.0, "url": "http://martingalemeasure.wordpress.com/2014/06/24/solving-the-15-puzzle-with-haskell-and-diagrams-10/", "author_flair_text": null, "title": "Solving the 15-Puzzle with Haskell and diagrams", "created_utc": 1403659692.0, "ups": 19, "num_comments": 6, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I can&amp;#39;t figure out why I&amp;#39;m told&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Not in scope: \u2018answer\u2019\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Source:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;guessGame :: (RandomGen g) =&amp;gt; g -&amp;gt; Int -&amp;gt; Int -&amp;gt; Int -&amp;gt; InputT IO ()\nguessGame gen low high guesses = do\n  let (answer, gen1) = randomR (low, high) gen\n  loop 5\n  where loop n = do\n          guess &amp;lt;- getInputLine $ &amp;quot;Guess the number: &amp;quot; ++ show low ++ &amp;quot;, &amp;quot; ++ show high\n          case guess of\n            Just g -&amp;gt; if (read g) == answer then return () else loopagain\n            Nothing -&amp;gt; return ()\n          where loopagain = if n &amp;gt; 0 then loop (n - 1) else return ()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Isn&amp;#39;t &amp;#39;loop&amp;#39; a closure whose environment contains &amp;#39;answer&amp;#39;?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I can't figure out why I'm told\n\n    Not in scope: \u2018answer\u2019\n\nSource:\n\n    guessGame :: (RandomGen g) =&gt; g -&gt; Int -&gt; Int -&gt; Int -&gt; InputT IO ()\n    guessGame gen low high guesses = do\n      let (answer, gen1) = randomR (low, high) gen\n      loop 5\n      where loop n = do\n              guess &lt;- getInputLine $ \"Guess the number: \" ++ show low ++ \", \" ++ show high\n              case guess of\n                Just g -&gt; if (read g) == answer then return () else loopagain\n                Nothing -&gt; return ()\n              where loopagain = if n &gt; 0 then loop (n - 1) else return ()\n\nIsn't 'loop' a closure whose environment contains 'answer'?", "likes": null, "secure_media": null, "link_flair_text": null, "id": "2919mj", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "ignorantone", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/2919mj/learn_i_dont_understand_this_syntax_error/", "name": "t3_2919mj", "created": 1403703787.0, "url": "http://www.reddit.com/r/haskell/comments/2919mj/learn_i_dont_understand_this_syntax_error/", "author_flair_text": null, "title": "[learn] I don't understand this syntax error", "created_utc": 1403674987.0, "ups": 5, "num_comments": 7, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "burz.github.io", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "290sgz", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "MyTribeCalledQuest", "media": null, "score": 12, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/LWY4qA8A7CAJqsRx.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/290sgz/parsing_a_functional_language_with_parsec/", "name": "t3_290sgz", "created": 1403690832.0, "url": "http://burz.github.io/2014/06/24/parsing.html", "author_flair_text": null, "title": "Parsing a functional language with Parsec", "created_utc": 1403662032.0, "ups": 12, "num_comments": 1, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "jeremykun.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28zo6q", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "matematikaadit", "media": null, "score": 27, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/TqUmrTfaJsfRZwZC.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28zo6q/the_mathematics_of_secret_sharing/", "name": "t3_28zo6q", "created": 1403665929.0, "url": "http://jeremykun.com/2014/06/23/the-mathematics-of-secret-sharing/", "author_flair_text": null, "title": "The Mathematics of Secret Sharing", "created_utc": 1403637129.0, "ups": 27, "num_comments": 5, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Most everyone I talk to about haskell is already a programmer with their own favorite languages. What are some small, interesting/amazing things I can show people on a whiteboard to explain the power of haskell? &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m looking (vaguely) for examples somewhat like 2.3 and 3.3 from &lt;a href=\"http://www.haskell.org/haskellwiki/All_About_Monads\"&gt;here&lt;/a&gt;, or maybe like these examples &lt;a href=\"http://www.cs.dartmouth.edu/%7Edoug/powser.html\"&gt;I found.&lt;/a&gt; But, I&amp;#39;m hoping to find examples that can be given more on the fly, and at a somewhat high-language level to &amp;quot;evangelize&amp;quot; with, for lack of a better term.&lt;/p&gt;\n\n&lt;p&gt;Ideally the examples would be plain word examples that could be scratched out on a whiteboard impromptu. So for the above I might describe it something along the lines of &amp;quot;you could write out the sheep linage as &amp;quot;sheep, dad, dad&amp;#39;s mom&amp;quot; ... etc. But if one of the sheep didn&amp;#39;t have a parent, the entire chain would return &amp;quot;nothing&amp;quot;. However in haskell you can write out monads to simplify the entire thing down to &amp;quot;grandma = sheep&amp;#39;s mom&amp;#39;s mom&amp;quot; and it takes care of all the possible lack of parents because of the monad class ... etc.&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;I realize haskell&amp;#39;s true power comes from the paradigm shift you experience when programming, and from other things that are not as easy to explain, especially briefly or high-level, but rather have to be somewhat experienced on your own. That being said, can you guys think of any examples, even so?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Most everyone I talk to about haskell is already a programmer with their own favorite languages. What are some small, interesting/amazing things I can show people on a whiteboard to explain the power of haskell? \n\nI'm looking (vaguely) for examples somewhat like 2.3 and 3.3 from [here](http://www.haskell.org/haskellwiki/All_About_Monads), or maybe like these examples [I found.](http://www.cs.dartmouth.edu/~doug/powser.html) But, I'm hoping to find examples that can be given more on the fly, and at a somewhat high-language level to \"evangelize\" with, for lack of a better term.\n\nIdeally the examples would be plain word examples that could be scratched out on a whiteboard impromptu. So for the above I might describe it something along the lines of \"you could write out the sheep linage as \"sheep, dad, dad's mom\" ... etc. But if one of the sheep didn't have a parent, the entire chain would return \"nothing\". However in haskell you can write out monads to simplify the entire thing down to \"grandma = sheep's mom's mom\" and it takes care of all the possible lack of parents because of the monad class ... etc.\"\n\nI realize haskell's true power comes from the paradigm shift you experience when programming, and from other things that are not as easy to explain, especially briefly or high-level, but rather have to be somewhat experienced on your own. That being said, can you guys think of any examples, even so?", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28zx87", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "thang1thang2", "media": null, "score": 19, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/28zx87/whats_your_favorite_response_to_the_show_me_the/", "name": "t3_28zx87", "created": 1403670894.0, "url": "http://www.reddit.com/r/haskell/comments/28zx87/whats_your_favorite_response_to_the_show_me_the/", "author_flair_text": null, "title": "What's your favorite response to the \"show me the magic\" question when it comes to Haskell?", "created_utc": 1403642094.0, "ups": 19, "num_comments": 75, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28znfm", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "Mob_Of_One", "media": null, "score": 23, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/EcznisyWrgRqD1JC.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28znfm/guide_to_learning_materials_for_helping_people/", "name": "t3_28znfm", "created": 1403665516.0, "url": "https://github.com/bitemyapp/learnhaskell", "author_flair_text": null, "title": "Guide to learning materials for helping people learn Haskell", "created_utc": 1403636716.0, "ups": 23, "num_comments": 18, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28yu1f", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "yallop", "media": null, "score": 55, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/h3-Eeon37rk2NpHD.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28yu1f/haskell_2014_accepted_papers_with_links_pull/", "name": "t3_28yu1f", "created": 1403648757.0, "url": "https://github.com/yallop/haskell2014-papers", "author_flair_text": null, "title": "Haskell 2014 accepted papers, with links (pull requests welcome)", "created_utc": 1403619957.0, "ups": 55, "num_comments": 5, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://lpaste.net/7044445693489971200\"&gt;http://lpaste.net/7044445693489971200&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Primary concerns are on practicality, production readiness, etc. without making example too verbose.&lt;/p&gt;\n\n&lt;p&gt;Things I already know could be done:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Use TQueue (more efficient)&lt;/li&gt;\n&lt;li&gt;Use TBQueue (bounded and more efficient - back-pressure is difficult to do right)&lt;/li&gt;\n&lt;li&gt;Instead of sinking into side effects, send results as Async promises downstream or back to worker supervisor&lt;/li&gt;\n&lt;li&gt;Rate limiting (I mean above and beyond limiting worker pool size)&lt;/li&gt;\n&lt;li&gt;Dynamic adjustment of worker pool size in response to workload&lt;/li&gt;\n&lt;li&gt;Worker status updates, monitoring - I was thinking of maybe checking queue/chan size and submission of &amp;quot;time to complete last task&amp;quot; rolling metrics to get an idea of &amp;quot;how backed up are we?&amp;quot;&lt;/li&gt;\n&lt;li&gt;Use Pipes, pipes-concurrency, MVC, Conduit, Iteratees, io-streams, or simple-conduit - using any of these wouldn&amp;#39;t change my operational/visibility concerns.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It&amp;#39;s fine if you want to elaborate on any of the above, but they don&amp;#39;t need mentioned now that I have.&lt;/p&gt;\n\n&lt;p&gt;Any ideas? This was inspired by a friend diving into Pipes recently to see if he could be happier with some Haskell code he was using at work. I was partly trying to see if the CSP&amp;#39;ish patterns I&amp;#39;m accustomed to &amp;quot;translate&amp;quot; to Haskell nicely.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m quite satisfied so far, but I know it&amp;#39;s very na\u00efve still.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "http://lpaste.net/7044445693489971200\n\nPrimary concerns are on practicality, production readiness, etc. without making example too verbose.\n\nThings I already know could be done:\n\n* Use TQueue (more efficient)\n* Use TBQueue (bounded and more efficient - back-pressure is difficult to do right)\n* Instead of sinking into side effects, send results as Async promises downstream or back to worker supervisor\n* Rate limiting (I mean above and beyond limiting worker pool size)\n* Dynamic adjustment of worker pool size in response to workload\n* Worker status updates, monitoring - I was thinking of maybe checking queue/chan size and submission of \"time to complete last task\" rolling metrics to get an idea of \"how backed up are we?\"\n* Use Pipes, pipes-concurrency, MVC, Conduit, Iteratees, io-streams, or simple-conduit - using any of these wouldn't change my operational/visibility concerns.\n\nIt's fine if you want to elaborate on any of the above, but they don't need mentioned now that I have.\n\nAny ideas? This was inspired by a friend diving into Pipes recently to see if he could be happier with some Haskell code he was using at work. I was partly trying to see if the CSP'ish patterns I'm accustomed to \"translate\" to Haskell nicely.\n\nI'm quite satisfied so far, but I know it's very na\u00efve still.", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28zwt9", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "Mob_Of_One", "media": null, "score": 6, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/28zwt9/decided_to_play_with_tchan_last_night_made_a/", "name": "t3_28zwt9", "created": 1403670670.0, "url": "http://www.reddit.com/r/haskell/comments/28zwt9/decided_to_play_with_tchan_last_night_made_a/", "author_flair_text": null, "title": "Decided to play with TChan last night, made a little worker pool + queue example. How would you improve it?", "created_utc": 1403641870.0, "ups": 6, "num_comments": 8, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28y454", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "ciderpunx", "media": null, "score": 39, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/0f7mMaVeXIe9idbL.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28y454/haskoin_a_haskell_implementation_of_the_bitcoin/", "name": "t3_28y454", "created": 1403623199.0, "url": "https://github.com/haskoin/haskoin", "author_flair_text": null, "title": "Haskoin: A Haskell implementation of the Bitcoin protocol.", "created_utc": 1403594399.0, "ups": 39, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "functional-art.org", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28yh42", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "yaxu", "media": null, "score": 11, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/OpqSSvhNS310mFe-.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28yh42/farm_workshop_programme_announced/", "name": "t3_28yh42", "created": 1403638692.0, "url": "http://functional-art.org/2014/", "author_flair_text": null, "title": "FARM Workshop programme announced", "created_utc": 1403609892.0, "ups": 11, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Rust introduced it&amp;#39;s package manager Cargo [1], and has the following feature:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;If I have three packages:\n   - uno depends on json 1.3.6\n   - dos depends on json 1.4.12\n   - tres depends on json 2.1.0\nCargo will use json 1.4.12 for uno and dos, and json 2.1.0 for tres.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I don&amp;#39;t believe Cabal works like this (encouraging the use of SemVer [2] to version and aid dependency resolution of packages)&lt;/p&gt;\n\n&lt;p&gt;I know the way Cabal works is well-thought out.  Would we want to do the same for Cabal, or is it trying to solve a harder problem (and what do we gain)?  &lt;/p&gt;\n\n&lt;p&gt;(I looked at &lt;a href=\"http://www.haskell.org/cabal/FAQ.html#dependencies-conflict\"&gt;http://www.haskell.org/cabal/FAQ.html#dependencies-conflict&lt;/a&gt; briefly)&lt;/p&gt;\n\n&lt;p&gt;[1] &lt;a href=\"https://mail.mozilla.org/pipermail/rust-dev/2014-June/010569.html\"&gt;https://mail.mozilla.org/pipermail/rust-dev/2014-June/010569.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;[2] &lt;a href=\"http://semver.org/\"&gt;http://semver.org/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Rust introduced it's package manager Cargo [1], and has the following feature:\n\n    If I have three packages:\n       - uno depends on json 1.3.6\n       - dos depends on json 1.4.12\n       - tres depends on json 2.1.0\n    Cargo will use json 1.4.12 for uno and dos, and json 2.1.0 for tres.\n\nI don't believe Cabal works like this (encouraging the use of SemVer [2] to version and aid dependency resolution of packages)\n\nI know the way Cabal works is well-thought out.  Would we want to do the same for Cabal, or is it trying to solve a harder problem (and what do we gain)?  \n\n(I looked at http://www.haskell.org/cabal/FAQ.html#dependencies-conflict briefly)\n\n[1] https://mail.mozilla.org/pipermail/rust-dev/2014-June/010569.html\n\n[2] http://semver.org/", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28yzkc", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "Platz", "media": null, "score": 7, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1403623535.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/28yzkc/question_about_cabal_dependency_resolution_vs_rust/", "name": "t3_28yzkc", "created": 1403652146.0, "url": "http://www.reddit.com/r/haskell/comments/28yzkc/question_about_cabal_dependency_resolution_vs_rust/", "author_flair_text": null, "title": "Question about Cabal dependency resolution (vs Rust)", "created_utc": 1403623346.0, "ups": 7, "num_comments": 13, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "stackoverflow.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28z6v4", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "yomritoyj", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/80tnunXhQJXBAP3L.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28z6v4/why_two_definitions_of_reverse_in_haskells/", "name": "t3_28z6v4", "created": 1403656487.0, "url": "http://stackoverflow.com/questions/24391077/why-two-definitions-of-reverse-in-haskells-data-list/", "author_flair_text": null, "title": "Why two definitions of 'reverse' in Haskell's Data.List?", "created_utc": 1403627687.0, "ups": 3, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "infoq.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28warc", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "tyrionite", "media": null, "score": 31, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28warc/the_haxl_project_at_facebook_presentation/", "name": "t3_28warc", "created": 1403579330.0, "url": "http://www.infoq.com/presentations/haxl", "author_flair_text": null, "title": "The Haxl Project at Facebook (presentation)", "created_utc": 1403550530.0, "ups": 31, "num_comments": 13, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "plv.mpi-sws.org", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28v6c9", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "yitz", "media": null, "score": 72, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/l_D3OrtfG4CP1YPU.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28v6c9/backpack_an_mllike_module_system_for_haskell/", "name": "t3_28v6c9", "created": 1403553807.0, "url": "http://plv.mpi-sws.org/backpack/", "author_flair_text": null, "title": "Backpack: An ML-like module system for Haskell", "created_utc": 1403525007.0, "ups": 72, "num_comments": 44, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "pchiusano.io", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28vfd0", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "pchiusano", "media": null, "score": 49, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28vfd0/a_simple_alternative_to_de_bruijn_indexing_from/", "name": "t3_28vfd0", "created": 1403561242.0, "url": "http://pchiusano.io/2014-06-20/simple-debruijn-alternative.html", "author_flair_text": null, "title": "A simple alternative to De Bruijn indexing, from ICFP 2013", "created_utc": 1403532442.0, "ups": 49, "num_comments": 24, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "medium.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28vev9", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "jaspervdj", "media": null, "score": 36, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/VQ0htd9GlBNjODgH.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28vev9/announcing_psqueues_faster_priority_search_queues/", "name": "t3_28vev9", "created": 1403560945.0, "url": "https://medium.com/@bttr/announcing-psqueues-8a0fe9fe939", "author_flair_text": null, "title": "Announcing psqueues: faster priority search queues in Haskell", "created_utc": 1403532145.0, "ups": 36, "num_comments": 19, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "byorgey.wordpress.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28vbct", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "yitz", "media": null, "score": 44, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://a.thumbs.redditmedia.com/gUvv-eb-E87Zz3xb.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28vbct/guide_to_the_catsters_lectures_on_category_theory/", "name": "t3_28vbct", "created": 1403558324.0, "url": "http://byorgey.wordpress.com/2014/01/14/catsters-guide/", "author_flair_text": null, "title": "Guide to the Catsters lectures on category theory", "created_utc": 1403529524.0, "ups": 44, "num_comments": 4, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "meetup.com", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28vg62", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "gmoes", "media": null, "score": 24, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28vg62/roman_cheplyaka_will_be_presenting_reuse_your/", "name": "t3_28vg62", "created": 1403561818.0, "url": "http://www.meetup.com/Haskell-DC/events/189794662/", "author_flair_text": null, "title": "Roman Cheplyaka will be presenting \"Reuse Your Monadic Code\" at the HaskellDC meetup group.", "created_utc": 1403533018.0, "ups": 24, "num_comments": 0, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Currently, the instructions for using Stackage say that one should modify the &lt;code&gt;remote-repo&lt;/code&gt; in &lt;code&gt;~/.cabal/config&lt;/code&gt;, e.g., from the latest \n&lt;a href=\"http://www.stackage.org/stackage/c337a5ffea41c2638930e00ecab3ca59ffb9b1da\"&gt;Stackage build for GHC 7.6, 2014-06-21&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nremote-repo: stackage:http://www.stackage.org/stackage/c337a5ffea41c2638930e00ecab3ca59ffb9b1da\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;However, in order to have &lt;code&gt;~/.cabal/config&lt;/code&gt; in the first place, one must first run &lt;code&gt;cabal update&lt;/code&gt; which works with Hackage by default. &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;So, the question is: how to do the initial &lt;code&gt;cabal update&lt;/code&gt; to use Stackage right away in the case when &lt;code&gt;~/.cabal/config&lt;/code&gt; and &lt;code&gt;~/.cabal/ghc&lt;/code&gt; folders do not exist yet? I could not find any parameters for &lt;code&gt;cabal&lt;/code&gt; nor &lt;code&gt;cabal update&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The second question is: isn&amp;#39;t there any negative impact of running &lt;code&gt;cabal update&lt;/code&gt; from Hackage first and then switching the &lt;code&gt;remote-repo&lt;/code&gt; to Stackage?&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The third question is: how to use Stackage within cabal sandboxes?&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Is it possible to somehow have Stackage as primary and Hackage as secondary &lt;code&gt;remote-repo&lt;/code&gt; so that packages missing from Stackage are automatically looked up on Hackage?&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Currently, the instructions for using Stackage say that one should modify the `remote-repo` in `~/.cabal/config`, e.g., from the latest \n[Stackage build for GHC 7.6, 2014-06-21](http://www.stackage.org/stackage/c337a5ffea41c2638930e00ecab3ca59ffb9b1da).\n\n```\nremote-repo: stackage:http://www.stackage.org/stackage/c337a5ffea41c2638930e00ecab3ca59ffb9b1da\n```\n\nHowever, in order to have `~/.cabal/config` in the first place, one must first run `cabal update` which works with Hackage by default. \n\n1. So, the question is: how to do the initial `cabal update` to use Stackage right away in the case when `~/.cabal/config` and `~/.cabal/ghc` folders do not exist yet? I could not find any parameters for `cabal` nor `cabal update`.\n\n2. The second question is: isn't there any negative impact of running `cabal update` from Hackage first and then switching the `remote-repo` to Stackage?\n\n3. The third question is: how to use Stackage within cabal sandboxes?\n\n4. Is it possible to somehow have Stackage as primary and Hackage as secondary `remote-repo` so that packages missing from Stackage are automatically looked up on Hackage?", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28vvr1", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "mallai", "media": null, "score": 10, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1403626404.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/28vvr1/how_to_use_stackage_at_first_cabal_update/", "name": "t3_28vvr1", "created": 1403571101.0, "url": "http://www.reddit.com/r/haskell/comments/28vvr1/how_to_use_stackage_at_first_cabal_update/", "author_flair_text": null, "title": "How to use Stackage at first cabal update?", "created_utc": 1403542301.0, "ups": 10, "num_comments": 13, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "blog.gekkou.co.uk", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28v2e1", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "yitz", "media": null, "score": 23, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28v2e1/windows_qt_binaries_for_the_haskell_platform_hsqml/", "name": "t3_28v2e1", "created": 1403549227.0, "url": "http://blog.gekkou.co.uk/2014/06/windows-qt-binaries-for-haskell.html", "author_flair_text": null, "title": "Windows Qt binaries for the Haskell Platform (HsQML)", "created_utc": 1403520427.0, "ups": 23, "num_comments": 3, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "self.haskell", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The School of Computer Science at the University of Nottingham\nin the UK is seeking to appoint a new Assistant Professor:\n&lt;a href=\"http://www.nottingham.ac.uk/jobs/currentvacancies/ref/SCI181514\"&gt;http://www.nottingham.ac.uk/jobs/currentvacancies/ref/SCI181514&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Applications in the area of the Functional Programming (FP)\nlab would be most welcome.  The FP lab is keen to receive\napplications from candidates with an excellent publication\nrecord, experience in combining theory with practice, and the\nability to secure external funding to support their research.\nFurther information about the FP lab is available from:\n&lt;a href=\"http://fp.cs.nott.ac.uk\"&gt;http://fp.cs.nott.ac.uk&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The deadline for applications is Friday 22nd August 2014.\nThe advert mentions computer vision, but the position is\nopen to applicants from any area of Computer Science.&lt;/p&gt;\n\n&lt;p&gt;Graham Hutton&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "The School of Computer Science at the University of Nottingham\nin the UK is seeking to appoint a new Assistant Professor:\nhttp://www.nottingham.ac.uk/jobs/currentvacancies/ref/SCI181514\n\nApplications in the area of the Functional Programming (FP)\nlab would be most welcome.  The FP lab is keen to receive\napplications from candidates with an excellent publication\nrecord, experience in combining theory with practice, and the\nability to secure external funding to support their research.\nFurther information about the FP lab is available from:\nhttp://fp.cs.nott.ac.uk\n\nThe deadline for applications is Friday 22nd August 2014.\nThe advert mentions computer vision, but the position is\nopen to applicants from any area of Computer Science.\n\nGraham Hutton", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28v9n4", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "grahamhutton", "media": null, "score": 14, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "self", "subreddit_id": "t5_2qh36", "edited": 1403528489.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": true, "permalink": "/r/haskell/comments/28v9n4/new_assistant_professor_position_in_nottingham/", "name": "t3_28v9n4", "created": 1403556940.0, "url": "http://www.reddit.com/r/haskell/comments/28v9n4/new_assistant_professor_position_in_nottingham/", "author_flair_text": null, "title": "New Assistant Professor position in Nottingham", "created_utc": 1403528140.0, "ups": 14, "num_comments": 3, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "chris-taylor.github.io", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28uyxc", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "pjdelport", "media": null, "score": 12, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "default", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28uyxc/io_is_pure_explaining_haskells_io_with_an_io/", "name": "t3_28uyxc", "created": 1403544697.0, "url": "http://chris-taylor.github.io/blog/2013/02/09/io-is-not-a-side-effect/", "author_flair_text": null, "title": "I/O Is Pure: Explaining Haskell's IO with an I/O mini-language", "created_utc": 1403515897.0, "ups": 12, "num_comments": 18, "visited": false, "num_reports": null, "distinguished": null}}, {"kind": "t3", "data": {"domain": "neilmitchell.blogspot.de", "banned_by": null, "media_embed": {}, "subreddit": "haskell", "selftext_html": null, "selftext": "", "likes": null, "secure_media": null, "link_flair_text": null, "id": "28tttf", "gilded": 0, "secure_media_embed": {}, "clicked": false, "stickied": false, "author": "heisenbug", "media": null, "score": 50, "approved_by": null, "over_18": false, "hidden": false, "thumbnail": "http://b.thumbs.redditmedia.com/kfnghbm2mfprZqP-.jpg", "subreddit_id": "t5_2qh36", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "saved": false, "is_self": false, "permalink": "/r/haskell/comments/28tttf/ghcmake_released/", "name": "t3_28tttf", "created": 1403508618.0, "url": "http://neilmitchell.blogspot.de/2014/06/announcing-ghc-make.html", "author_flair_text": null, "title": "'ghc-make' released", "created_utc": 1403479818.0, "ups": 50, "num_comments": 19, "visited": false, "num_reports": null, "distinguished": null}}], "after": "t3_28tttf", "before": null}}